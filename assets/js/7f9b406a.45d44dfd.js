"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3138],{3262:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});var n=o(8040),r=o(5246);const t={slug:"read-avro-command-line",title:"Reading and Writing Avro Files from the Command Line",authors:"jiaqi",tags:["Java","Apache Avro"]},s="Reading and Writing Avro Files from the Command Line",i={permalink:"/blog/read-avro-command-line",editUrl:"https://github.com/QubitPi/chatbot-ws/tree/master/docs/blog/2020-08-17-26-read-avro-command-line.md",source:"@site/blog/2020-08-17-26-read-avro-command-line.md",title:"Reading and Writing Avro Files from the Command Line",description:"[//]: # (Copyright 2025 Jiaqi Liu. All rights reserved.)",date:"2020-08-17T00:00:00.000Z",formattedDate:"August 17, 2020",tags:[{label:"Java",permalink:"/blog/tags/java"},{label:"Apache Avro",permalink:"/blog/tags/apache-avro"}],readingTime:4.85,hasTruncateMarker:!0,authors:[{name:"Jack",title:"Maintainer of ChatbotWS",url:"https://github.com/QubitPi",imageURL:"https://avatars.githubusercontent.com/u/16126939?v=4",key:"jiaqi"}],frontMatter:{slug:"read-avro-command-line",title:"Reading and Writing Avro Files from the Command Line",authors:"jiaqi",tags:["Java","Apache Avro"]},unlisted:!1,prevItem:{title:"Programming Oracle Database",permalink:"/blog/oracle-programming"},nextItem:{title:"Refer to Environment Variables in POM",permalink:"/blog/env-var-in-pom"}},l={authorsImageUrls:[void 0]},c=[{value:"What We Want To Do",id:"what-we-want-to-do",level:2},{value:"Getting Avro Tools",id:"getting-avro-tools",level:2},{value:"Tools Included in Avro Tools",id:"tools-included-in-avro-tools",level:2},{value:"Example Data",id:"example-data",level:2},{value:"Avro Schema",id:"avro-schema",level:3},{value:"Data records in JSON format",id:"data-records-in-json-format",level:3},{value:"Converting To and From Binary Avro",id:"converting-to-and-from-binary-avro",level:2},{value:"JSON to Binary Avro",id:"json-to-binary-avro",level:3},{value:"Binary Avro to JSON",id:"binary-avro-to-json",level:3},{value:"Retrieve Avro Schema from Binary Avro",id:"retrieve-avro-schema-from-binary-avro",level:3}];function d(e){const a={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.a,{href:"http://avro.apache.org/",children:"Apache Avro"}),' is becoming one of the most popular data serialization formats nowadays, and this\nholds true particularly for Hadoop-based big data platforms because tools like Pig, Hive and of course Hadoop itself\nnatively support reading and writing data in Avro format. Many users seem to enjoy Avro but I have heard many complaints\nabout not being able to conveniently read or write Avro files with command line tools \u2013 "Avro is nice, but why do I have\nto write Java or Python code just to quickly see what\'s in a binary Avro file, or discover at least its Avro schema?"']}),"\n",(0,n.jsx)(a.p,{children:"To those users it comes as a surprise that Avro actually ships with exactly such command line tools but apparently they\nare not prominently advertised or documented as such. In this short article I will show a few hands-on examples on how\nto read, write, compress and convert data from and to binary Avro using Avro Tools 1.11.3."}),"\n",(0,n.jsx)(a.h2,{id:"what-we-want-to-do",children:"What We Want To Do"}),"\n",(0,n.jsx)(a.p,{children:"Here is an overview of what we want to do:"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"We will start with an example Avro schema and a corresponding data file in plain-text JSON format."}),"\n",(0,n.jsx)(a.li,{children:"We will use Avro Tools to convert the JSON file into binary Avro, without and with compression (Snappy), and from\nbinary Avro back to JSON."}),"\n"]}),"\n",(0,n.jsx)(a.h2,{id:"getting-avro-tools",children:"Getting Avro Tools"}),"\n",(0,n.jsxs)(a.p,{children:["You can get a copy of the latest stable Avro Tools jar file from the\n",(0,n.jsx)(a.a,{href:"http://avro.apache.org/releases.html#Download",children:"Avro Releases"})," page. The actual file is in the ",(0,n.jsx)(a.code,{children:"java"})," subdirectory of a\ngiven Avro release version. Here is a direct link to\n",(0,n.jsx)(a.a,{href:"https://dlcdn.apache.org/avro/avro-1.11.3/java/avro-tools-1.11.3.jar",children:"avro-tools-1.11.3.jar"})," (11 MB) on the US Apache\nmirror site."]}),"\n",(0,n.jsxs)(a.p,{children:["Save ",(0,n.jsx)(a.code,{children:"avro-tools-1.11.3.jar"})," to a directory of your choice. I will use ",(0,n.jsx)(a.code,{children:"~/avro-tools-1.11.3.jar"})," for the examples shown\nbelow."]}),"\n",(0,n.jsx)(a.h2,{id:"tools-included-in-avro-tools",children:"Tools Included in Avro Tools"}),"\n",(0,n.jsx)(a.p,{children:"Just run Avro Tools without any parameters to see what's included:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"$ java -jar ~/avro-tools-1.11.3.jar\n[...snip...]\nAvailable tools:\n      compile  Generates Java code for the given schema.\n       concat  Concatenates avro files without re-compressing.\n   fragtojson  Renders a binary-encoded Avro datum as JSON.\n     fromjson  Reads JSON records and writes an Avro data file.\n     fromtext  Imports a text file into an avro data file.\n      getmeta  Prints out the metadata of an Avro data file.\n    getschema  Prints out schema of an Avro data file.\n          idl  Generates a JSON schema from an Avro IDL file\n       induce  Induce schema/protocol from Java class/interface via reflection.\n   jsontofrag  Renders a JSON-encoded Avro datum as binary.\n      recodec  Alters the codec of a data file.\n  rpcprotocol  Output the protocol of a RPC service\n   rpcreceive  Opens an RPC Server and listens for one message.\n      rpcsend  Sends a single RPC message.\n       tether  Run a tethered mapreduce job.\n       tojson  Dumps an Avro data file as JSON, one record per line.\n       totext  Converts an Avro data file to a text file.\n  trevni_meta  Dumps a Trevni file's metadata as JSON.\ntrevni_random  Create a Trevni file filled with random instances of a schema.\ntrevni_tojson  Dumps a Trevni file as JSON.\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Likewise run any particular tool without parameters to see its usage/help output. For example, here is the help of the\n",(0,n.jsx)(a.code,{children:"fromjson"})," tool:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"$ java -jar ~/avro-tools-1.11.3.jar fromjson\nExpected 1 arg: input_file\nOption                                  Description\n------                                  -----------\n--codec                                 Compression codec (default: null)\n--schema                                Schema\n--schema-file                           Schema File\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Note that most of the tools write to ",(0,n.jsx)(a.code,{children:"STDOUT"}),", so normally you would like to pipe their output to a file via the Bash\n",(0,n.jsx)(a.code,{children:">"})," redirection operator (particularly when working with large files)."]}),"\n",(0,n.jsx)(a.h2,{id:"example-data",children:"Example Data"}),"\n",(0,n.jsxs)(a.p,{children:["In the next sections I will use the following example data to demonstrate Avro Tools. You can also download the example\nfiles ",(0,n.jsx)(a.a,{href:"https://github.com/miguno/avro-cli-examples",children:"here"}),"."]}),"\n",(0,n.jsx)(a.h3,{id:"avro-schema",children:"Avro Schema"}),"\n",(0,n.jsxs)(a.p,{children:["The schema below defines a tuple of ",(0,n.jsx)(a.code,{children:"(username, tweet, timestamp)"})," as the format of our example data records"]}),"\n",(0,n.jsxs)(a.p,{children:["File: ",(0,n.jsx)(a.code,{children:"twitter.avsc"}),":"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json",children:'{\n  "type" : "record",\n  "name" : "twitter_schema",\n  "namespace" : "com.miguno.avro",\n  "fields" : [ {\n    "name" : "username",\n    "type" : "string",\n    "doc"  : "Name of the user account on Twitter.com"\n  }, {\n    "name" : "tweet",\n    "type" : "string",\n    "doc"  : "The content of the user\'s Twitter message"\n  }, {\n    "name" : "timestamp",\n    "type" : "long",\n    "doc"  : "Unix epoch time in seconds"\n  } ],\n  "doc:" : "A basic schema for storing Twitter messages"\n}\n'})}),"\n",(0,n.jsx)(a.h3,{id:"data-records-in-json-format",children:"Data records in JSON format"}),"\n",(0,n.jsxs)(a.p,{children:["Here is some corresponding example data with two records that follow the schema defined in the previous section. We\nstore this data in the file ",(0,n.jsx)(a.code,{children:"twitter.json"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:["Example data in ",(0,n.jsx)(a.code,{children:"twitter.json"})," in JSON format:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json",children:'{"username":"miguno","tweet":"Rock: Nerf paper, scissors is fine.","timestamp": 1366150681}\n{"username":"BlizzardCS","tweet":"Works as intended.  Terran is IMBA.","timestamp": 1366154481}\n'})}),"\n",(0,n.jsx)(a.h2,{id:"converting-to-and-from-binary-avro",children:"Converting To and From Binary Avro"}),"\n",(0,n.jsx)(a.h3,{id:"json-to-binary-avro",children:"JSON to Binary Avro"}),"\n",(0,n.jsx)(a.p,{children:"Without compression:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"java -jar ~/avro-tools-1.11.3.jar fromjson --schema-file twitter.avsc twitter.json > twitter.avro\n"})}),"\n",(0,n.jsx)(a.p,{children:"With Snappy compression:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"java -jar ~/avro-tools-1.11.3.jar fromjson --codec snappy --schema-file twitter.avsc twitter.json > twitter.snappy.avro\n"})}),"\n",(0,n.jsx)(a.h3,{id:"binary-avro-to-json",children:"Binary Avro to JSON"}),"\n",(0,n.jsx)(a.p,{children:"The same command will work on both uncompressed and compressed data."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"java -jar ~/avro-tools-1.11.3.jar tojson twitter.avro > twitter.json\njava -jar ~/avro-tools-1.11.3.jar tojson twitter.snappy.avro > twitter.json\n"})}),"\n",(0,n.jsx)(a.h3,{id:"retrieve-avro-schema-from-binary-avro",children:"Retrieve Avro Schema from Binary Avro"}),"\n",(0,n.jsx)(a.p,{children:"The same command will work on both uncompressed and compressed data."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"java -jar ~/avro-tools-1.11.3.jar getschema twitter.avro > twitter.avsc\njava -jar ~/avro-tools-1.11.3.jar getschema twitter.snappy.avro > twitter.avsc\n"})})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},5246:(e,a,o)=>{o.d(a,{R:()=>s,x:()=>i});var n=o(2340);const r={},t=n.createContext(r);function s(e){const a=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(t.Provider,{value:a},e.children)}}}]);