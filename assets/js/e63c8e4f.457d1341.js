"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2375],{9593:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var s=n(8040),t=n(5246);const a={slug:"jpql",title:"JQPL",authors:"jiaqi",tags:["Java","JQPL"]},r=void 0,l={permalink:"/blog/jpql",editUrl:"https://github.com/QubitPi/chatbot-ws/tree/master/docs/blog/2020-10-28-jpql.md",source:"@site/blog/2020-10-28-jpql.md",title:"JQPL",description:"[//]: # (Copyright 2025 Jiaqi Liu. All rights reserved.)",date:"2020-10-28T00:00:00.000Z",formattedDate:"October 28, 2020",tags:[{label:"Java",permalink:"/blog/tags/java"},{label:"JQPL",permalink:"/blog/tags/jqpl"}],readingTime:41.995,hasTruncateMarker:!0,authors:[{name:"Jack",title:"Maintainer of ChatbotWS",url:"https://github.com/QubitPi",imageURL:"https://avatars.githubusercontent.com/u/16126939?v=4",key:"jiaqi"}],frontMatter:{slug:"jpql",title:"JQPL",authors:"jiaqi",tags:["Java","JQPL"]},unlisted:!1,prevItem:{title:"PUT v.s. POST",permalink:"/blog/put-vs-post"},nextItem:{title:"What is Java EE",permalink:"/blog/java-ee"}},o={authorsImageUrls:[void 0]},c=[{value:"Caveats",id:"caveats",level:2},{value:"Avoid GROUPing BY subset of columns from SELECT",id:"avoid-grouping-by-subset-of-columns-from-select",level:3},{value:"JPQL Statement Types",id:"jpql-statement-types",level:2},{value:"JPQL Select Statement",id:"jpql-select-statement",level:3},{value:"JPQL Update and Delete Statements",id:"jpql-update-and-delete-statements",level:3},{value:"JPQL Abstract Schema Types and Query Domains",id:"jpql-abstract-schema-types-and-query-domains",level:2},{value:"JPQL Entity Naming",id:"jpql-entity-naming",level:3},{value:"JPQL Schema Example",id:"jpql-schema-example",level:3},{value:"JPQL FROM Clause and Navigational Declarations",id:"jpql-from-clause-and-navigational-declarations",level:2},{value:"JPQL FROM Identifiers",id:"jpql-from-identifiers",level:3},{value:"JPQL Identification Variables",id:"jpql-identification-variables",level:3},{value:"JPQL Range Declarations",id:"jpql-range-declarations",level:3},{value:"JPQL Path Expressions",id:"jpql-path-expressions",level:3},{value:"JPQL Joins",id:"jpql-joins",level:3},{value:"JPQL Inner Joins (Relationship Joins)",id:"jpql-inner-joins-relationship-joins",level:4},{value:"JPQL Outer Joins",id:"jpql-outer-joins",level:4},{value:"JPQL Fetch Joins",id:"jpql-fetch-joins",level:4},{value:"JPQL Collection Member Declarations",id:"jpql-collection-member-declarations",level:3},{value:"JPQL Polymorphism",id:"jpql-polymorphism",level:3},{value:"JPQL <code>WHERE</code> Clause",id:"jpql-where-clause",level:2},{value:"JPQL Conditional Expressions",id:"jpql-conditional-expressions",level:3},{value:"JPQL Literals",id:"jpql-literals",level:4},{value:"JPQL Identification Variables (WHERE/HAVING)",id:"jpql-identification-variables-wherehaving",level:4},{value:"JPQL Path Expressions (WHERE/HAVING)",id:"jpql-path-expressions-wherehaving",level:4},{value:"JPQL Input Parameters",id:"jpql-input-parameters",level:4},{value:"JPQL Positional Parameters",id:"jpql-positional-parameters",level:5},{value:"JPQL Named Parameters",id:"jpql-named-parameters",level:5},{value:"JPQL Conditional Expression Composition",id:"jpql-conditional-expression-composition",level:4},{value:"JPQL Operators and Operator Precedence",id:"jpql-operators-and-operator-precedence",level:4},{value:"JPQL Between Expressions",id:"jpql-between-expressions",level:4},{value:"JPQL In Expressions",id:"jpql-in-expressions",level:4},{value:"JPQL Like Expressions",id:"jpql-like-expressions",level:4},{value:"JPQL Null Comparison Expressions",id:"jpql-null-comparison-expressions",level:4},{value:"JPQL Empty Collection Comparison Expressions",id:"jpql-empty-collection-comparison-expressions",level:4},{value:"JPQL Collection Member Expressions",id:"jpql-collection-member-expressions",level:4},{value:"JPQL Exists Expressions",id:"jpql-exists-expressions",level:4},{value:"JPQL All or Any Expressions",id:"jpql-all-or-any-expressions",level:4},{value:"JPQL Subqueries",id:"jpql-subqueries",level:4},{value:"JPQL Functional Expressions",id:"jpql-functional-expressions",level:4},{value:"JPQL String Functions",id:"jpql-string-functions",level:5},{value:"JPQL Arithmetic Functions",id:"jpql-arithmetic-functions",level:5},{value:"JPQL Datetime Functions",id:"jpql-datetime-functions",level:5},{value:"JPQL <code>GROUP BY</code>, <code>HAVING</code>",id:"jpql-group-by-having",level:2},{value:"JPQL <code>SELECT</code> Clause",id:"jpql-select-clause",level:2},{value:"JPQL Result Type of the <code>SELECT</code> Clause",id:"jpql-result-type-of-the-select-clause",level:3},{value:"JPQL Constructor Expressions",id:"jpql-constructor-expressions",level:3},{value:"JPQL Null Values in the Query Result",id:"jpql-null-values-in-the-query-result",level:3},{value:"JPQL Aggregate Functions",id:"jpql-aggregate-functions",level:3},{value:"JPQL <code>ORDER BY</code> Clause",id:"jpql-order-by-clause",level:2},{value:"JPQL Bulk Update and Delete",id:"jpql-bulk-update-and-delete",level:2},{value:"JPQL Null Values",id:"jpql-null-values",level:2},{value:"JPQL Equality and Comparison Semantics",id:"jpql-equality-and-comparison-semantics",level:2},{value:"The Complete JPQL BNF",id:"the-complete-jpql-bnf",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.p,{children:"The Java Persistence Query Language (JPQL) is a platform-independent object-oriented query language defined by JPA.\nJPQL is similar to SQL, but operates on objects, attributes and relationships instead of tables and columns."}),"\n",(0,s.jsxs)(i.p,{children:['The Java Persistence query language (JPQL) is used to define searches against persistent entities independent of the\nmechanism used to store those entities. As such, JPQL is "portable", and not constrained to any particular data store\n(',(0,s.jsx)(i.a,{href:"#avoid-grouping-by-subset-of-columns-from-select",children:"although in some cases it does get constrained"}),"). The Java\nPersistence query language is an extension of the Enterprise JavaBeans query language, EJB QL, adding operations\nsuch as bulk deletes and updates, join operations, aggregates, projections, and subqueries. Furthermore, JPQL\nqueries can be declared statically in metadata, or can be dynamically built in code"]}),"\n",(0,s.jsx)(i.h2,{id:"caveats",children:"Caveats"}),"\n",(0,s.jsx)(i.h3,{id:"avoid-grouping-by-subset-of-columns-from-select",children:"Avoid GROUPing BY subset of columns from SELECT"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsxs)(i.strong,{children:["JPQL is not portable when it comes to ",(0,s.jsx)(i.code,{children:"GROUP BY"})," clause."]}),'. Let\'s say we have query that reads everyone who has\nlived in Washington. It is common in the U.S., however, that cities share common name. For example, there are more\nthan 80 locations whose names are "Washington". When a person move from ',(0,s.jsx)(i.em,{children:"Washington, Maine"})," to ",(0,s.jsx)(i.em,{children:"Washington,\nMassachusetts"}),", the ",(0,s.jsx)(i.code,{children:"Address"})," table will have 2 rows with the same combinations of ",(0,s.jsx)(i.code,{children:"ssn"})," and ",(0,s.jsx)(i.code,{children:"city"})," columns."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:'SELECT person\nFROM Person person LEFT JOIN Address address ON person.city = address.city\nWHERE address.city = "Washington"\nGROUP BY person.ssn\n'})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://stackoverflow.com/questions/30700316/sql-not-a-group-by-expression-with-oraclesql-and-innerquery-error",children:"This query will work for MySQL but not Oracle"}),",\nbecause Oracle requires"]}),"\n",(0,s.jsx)(i.h2,{id:"jpql-statement-types",children:"JPQL Statement Types"}),"\n",(0,s.jsx)(i.p,{children:"A JPQL statement may be"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["a ",(0,s.jsx)(i.code,{children:"SELECT"})," statement, or"]}),"\n",(0,s.jsxs)(i.li,{children:["an ",(0,s.jsx)(i.code,{children:"UPDATE"})," statement,"]}),"\n",(0,s.jsxs)(i.li,{children:["or a ",(0,s.jsx)(i.code,{children:"DELETE"})," statement"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"In BNF syntax, a query language statement is defined as:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"QL_statement ::= select_statement | update_statement | delete_statement\n"})}),"\n",(0,s.jsx)(i.h3,{id:"jpql-select-statement",children:"JPQL Select Statement"}),"\n",(0,s.jsx)(i.p,{children:"A select statement is a string which consists of the following clauses:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["a ",(0,s.jsx)(i.code,{children:"SELECT"})," clause, which determines the type of the objects or values to be selected;"]}),"\n",(0,s.jsxs)(i.li,{children:["a ",(0,s.jsx)(i.code,{children:"FROM"})," clause, which provides declarations that designate the domain to which the expressions specified in the\nother"]}),"\n",(0,s.jsx)(i.li,{children:"clauses of the query apply;"}),"\n",(0,s.jsxs)(i.li,{children:["an ",(0,s.jsx)(i.em,{children:"optional"})," ",(0,s.jsx)(i.code,{children:"WHERE"})," clause, which may be used to restrict the results that are returned by the query;"]}),"\n",(0,s.jsxs)(i.li,{children:["an ",(0,s.jsx)(i.em,{children:"optional"})," ",(0,s.jsx)(i.code,{children:"GROUP BY"})," clause, which allows query results to be aggregated in terms of groups;"]}),"\n",(0,s.jsxs)(i.li,{children:["an ",(0,s.jsx)(i.em,{children:"optional"})," ",(0,s.jsx)(i.code,{children:"HAVING"})," clause, which allows filtering over aggregated groups;"]}),"\n",(0,s.jsxs)(i.li,{children:["an ",(0,s.jsx)(i.em,{children:"optional"})," ",(0,s.jsx)(i.code,{children:"ORDER BY"})," clause, which may be used to order the results that are returned by the query."]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"In BNF syntax, a select statement is defined as:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"select_statement ::= select_clause from_clause [where_clause] [groupby_clause] [having_clause] [orderby_clause]\n"})}),"\n",(0,s.jsx)(i.h3,{id:"jpql-update-and-delete-statements",children:"JPQL Update and Delete Statements"}),"\n",(0,s.jsx)(i.p,{children:"Update and delete statements provide bulk operations over sets of entities. In BNF syntax, these operations are\ndefined as:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"update_statement ::= update_clause [where_clause]\ndelete_statement ::= delete_clause [where_clause\n"})}),"\n",(0,s.jsx)(i.h2,{id:"jpql-abstract-schema-types-and-query-domains",children:"JPQL Abstract Schema Types and Query Domains"}),"\n",(0,s.jsx)(i.p,{children:"The Java Persistence query language is a typed language, and every expression has a type. The type of an expression\nis derived from the structure of the expression, the abstract schema types of the identification variable\ndeclarations, the types to which the persistent fields and relationships evaluate, and the types of literals. The\nabstract schema type of an entity is derived from the entity class and the metadata information provided by Java\nlanguage annotations or in the XML descriptor."}),"\n",(0,s.jsx)(i.p,{children:"Informally, the abstract schema type of an entity can be characterized as follows:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:'For every persistent field or get accessor method (for a persistent property) of the entity class, there is a\nfield ("state-field") whose abstract schema type corresponds to that of the field or the result type of the\naccessor method.'}),"\n",(0,s.jsxs)(i.li,{children:['For every persistent relationship field or get accessor method (for a persistent relationship property) of the\nentity class, there is a field ("association-field") whose type is the abstract schema type of the related entity\n(or, if the relationship is a one-to-many or many-to-many, a collection of such). Abstract schema types are\nspecific to the query language data model. ',(0,s.jsx)(i.strong,{children:"The persistence provider is not required to implement or otherwise\nmaterialize an abstract schema type"}),". The domain of a query consists of the abstract schema types of all\nentities that are defined in the same persistence unit. The domain of a query may be restricted by the\nnavigability of the relationships of the entity on which it is based. The association-fields of an entity's\nabstract schema type determine navigability. Using the association-fields and their values, a query can select\nrelated entities and use their abstract schema types in the query."]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"jpql-entity-naming",children:"JPQL Entity Naming"}),"\n",(0,s.jsx)(i.p,{children:"Entities are designated in query strings by their entity names. The entity name is defined by the name element of\nthe Entity annotation (or the entity-name XML descriptor element), and defaults to the unqualified name of the\nentity class. Entity names are scoped within the persistence unit and must be unique within the persistence unit."}),"\n",(0,s.jsx)(i.h3,{id:"jpql-schema-example",children:"JPQL Schema Example"}),"\n",(0,s.jsxs)(i.p,{children:["This example assumes that the application developer provides several entity classes representing magazines,\npublishers, authors, and articles. The abstract schema types for these entities are ",(0,s.jsx)(i.code,{children:"Magazine"}),", ",(0,s.jsx)(i.code,{children:"Publisher"}),",\n",(0,s.jsx)(i.code,{children:"Author"}),", and ",(0,s.jsx)(i.code,{children:"Article"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The entity ",(0,s.jsx)(i.code,{children:"Publisher"})," has a one-to-many relationships with ",(0,s.jsx)(i.code,{children:"Magazine"}),". There is also a one-to-many relationship\nbetween ",(0,s.jsx)(i.code,{children:"Magazine"})," and ",(0,s.jsx)(i.code,{children:"Article"}),". The entity ",(0,s.jsx)(i.code,{children:"Article"})," is related to ",(0,s.jsx)(i.code,{children:"Author"})," in a one-to-one relationship."]}),"\n",(0,s.jsxs)(i.p,{children:["Queries to select magazines can be defined by navigating over the association-fields and state-fields defined by\n",(0,s.jsx)(i.code,{children:"Magazine"})," and ",(0,s.jsx)(i.code,{children:"Author"}),". A query to find all magazines that have unpublished articles is as follows:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT DISTINCT mag\nFROM Magazine AS mag\nJOIN mag.articles AS art\nWHERE art.published = FALSE\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The next query navigates over the association-field authors of the abstract schema type ",(0,s.jsx)(i.code,{children:"Magazine"})," to find\narticles, and uses the state-field ",(0,s.jsx)(i.code,{children:"published"})," of ",(0,s.jsx)(i.code,{children:"Article"})," to select those magazines that have at least one\narticle that is\npublished. Although predefined reserved identifiers, such as ",(0,s.jsx)(i.code,{children:"DISTINCT"}),", ",(0,s.jsx)(i.code,{children:"FROM"}),", ",(0,s.jsx)(i.code,{children:"AS"}),", ",(0,s.jsx)(i.code,{children:"JOIN"}),", ",(0,s.jsx)(i.code,{children:"WHERE"}),", and ",(0,s.jsx)(i.code,{children:"FALSE"}),",\nappear in upper case in this example, predefined reserved identifiers are case insensitive. The ",(0,s.jsx)(i.code,{children:"SELECT"})," clause of this\nexample designates the return type of this query to be of type ",(0,s.jsx)(i.code,{children:"Magazine"}),". Because the same persistence unit defines the\nabstract persistence schemas of the related entities, the developer can also specify a query over ",(0,s.jsx)(i.code,{children:"articles"})," that\nutilizes the abstract schema type for products, and hence the state-fields and association-fields of both the abstract\nschema types ",(0,s.jsx)(i.code,{children:"Magazine"})," and ",(0,s.jsx)(i.code,{children:"Author"}),". For example, if the abstract schema type ",(0,s.jsx)(i.code,{children:"Author"})," has a state-field named\n",(0,s.jsx)(i.code,{children:"firstName"}),", a query over ",(0,s.jsx)(i.code,{children:"articles"}),' can be specified using this state-field. Such a query might be to find all\nmagazines that have articles authored by someone with the first name "John".']}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT DISTINCT mag\nFROM Magazine mag\nJOIN mag.articles art JOIN art.author auth WHERE auth.firstName = 'John'\n"})}),"\n",(0,s.jsxs)(i.p,{children:["Because ",(0,s.jsx)(i.code,{children:"Magazine"})," is related to ",(0,s.jsx)(i.code,{children:"Author"})," by means of the relationships between ",(0,s.jsx)(i.code,{children:"Magazine"})," and ",(0,s.jsx)(i.code,{children:"Article"})," and between\n",(0,s.jsx)(i.code,{children:"Article"})," and ",(0,s.jsx)(i.code,{children:"Author"}),", navigation using the association-fields authors and product is used to express the query.\nThis query is specified by using the abstract schema name ",(0,s.jsx)(i.code,{children:"Magazine"}),", which designates the abstract schema type\nover which the query ranges. The basis for the navigation is provided by the association-fields authors and product\nof the abstract schema types ",(0,s.jsx)(i.code,{children:"Magazine"})," and ",(0,s.jsx)(i.code,{children:"Article"})," respectively."]}),"\n",(0,s.jsx)(i.h2,{id:"jpql-from-clause-and-navigational-declarations",children:"JPQL FROM Clause and Navigational Declarations"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"FROM"})," clause of a query defines the domain of the query by declaring identification variables. An\nidentification variable is an identifier declared in the ",(0,s.jsx)(i.code,{children:"FROM"})," clause of a query. The domain of the query may be\nconstrained by path expressions. Identification variables designate instances of a particular entity abstract\nschema type. The ",(0,s.jsx)(i.code,{children:"FROM"})," clause can contain multiple identification variable declarations separated by a comma (,):"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"from_clause ::= FROM identification_variable_declaration {, {identification_variable_declaration | collection_member_declaration}}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"identification_variable_declaration ::= range_variable_declaration { join | fetch_join }*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"range_variable_declaration ::= abstract_schema_name [AS] identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join ::= join_spec join_association_path_expression [AS] identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"fetch_join ::= join_spec FETCH join_association_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join_association_path_expression ::= join_collection_valued_path_expression | join_single_valued_association_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join_spec ::= [ LEFT [OUTER] | INNER ] JOIN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"collection_member_declaration ::= IN (collection_valued_path_expression) [AS] identification_variable"})}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"jpql-from-identifiers",children:"JPQL FROM Identifiers"}),"\n",(0,s.jsxs)(i.p,{children:["An identifier is a character sequence of unlimited length. ",(0,s.jsx)(i.strong,{children:"The character sequence must begin with a Java\nidentifier"})," start character, and all other characters must be Java identifier part characters. An identifier start\ncharacter is any character for which the method ",(0,s.jsx)(i.code,{children:"Character.isJavaIdentifierStart"})," returns ",(0,s.jsx)(i.code,{children:"true"}),". This includes the\nunderscore (",(0,s.jsx)(i.code,{children:"_"}),") character and the dollar-sign (",(0,s.jsx)(i.code,{children:"$"}),") character. An identifier-part character is any character for\nwhich the method ",(0,s.jsx)(i.code,{children:"Character.isJavaIdentifierPart"})," returns true . The question-mark (",(0,s.jsx)(i.code,{children:"?"}),") character is reserved for\nuse by the Java Persistence query language. The following are reserved identifiers:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"SELECT"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"FROM"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"WHERE"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"UPDATE"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"DELETE"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"JOIN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"OUTER"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"INNER"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"LEFT"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"GROUP"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"BY"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"HAVING"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"FETCH"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"DISTINCT"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"OBJECT"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"NULL"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"TRUE"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"FALSE"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"NOT"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"AND"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"OR"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"BETWEEN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"LIKE"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"IN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"AS"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"UNKNOWN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"EMPTY"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"MEMBER"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"OF"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"IS"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"AVG"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"MAX"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"MIN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"SUM"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"COUNT"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"ORDER"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"BY"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"ASC"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"DESC"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"MOD"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"UPPER"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"LOWER"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"TRIM"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"POSITION"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"CHARACTER_LENGTH"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"CHAR_LENGTH"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"BIT_LENGTH"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"CURRENT_TIME"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"CURRENT_DATE"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"CURRENT_TIMESTAMP"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"NEW"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"EXISTS"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"ALL"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"ANY"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"SOME"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Reserved identifiers are case insensitive. Reserved identifiers must not be used as identification variables. It is\nrecommended that other SQL reserved words not be used as identification variables in queries, as they may be used as\nreserved identifiers in future releases of the specification."}),"\n",(0,s.jsx)(i.h3,{id:"jpql-identification-variables",children:"JPQL Identification Variables"}),"\n",(0,s.jsxs)(i.p,{children:["An identification variable is a valid identifier declared in the ",(0,s.jsx)(i.code,{children:"FROM"})," clause of a query. All identification\nvariables must be declared in the ",(0,s.jsx)(i.code,{children:"FROM"})," clause. Identification variables cannot be declared in other clauses. An\nidentification variable must not be a reserved identifier or have the same name as any entity in the same\npersistence unit: Identification variables are case insensitive. An identification variable evaluates to a value of\nthe type of the expression used in declaring the variable. For example, consider the previous query:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT DISTINCT mag\nFROM Magazine mag JOIN mag.articles art JOIN art.author auth\nWHERE auth.firstName = 'John'\n"})}),"\n",(0,s.jsxs)(i.p,{children:["In the ",(0,s.jsx)(i.code,{children:"FROM"})," clause declaration ",(0,s.jsx)(i.code,{children:"mag.articles art"}),", the identification variable ",(0,s.jsx)(i.code,{children:"art"})," evaluates to any ",(0,s.jsx)(i.code,{children:"Article"}),"\nvalue directly reachable from ",(0,s.jsx)(i.code,{children:"Magazine"}),". The association-field articles is a collection of instances of the\nabstract schema type ",(0,s.jsx)(i.code,{children:"Article"})," and the identification variable ",(0,s.jsx)(i.code,{children:"art"})," refers to an element of this collection. The\ntype of ",(0,s.jsx)(i.code,{children:"auth"})," is the abstract schema type of ",(0,s.jsx)(i.code,{children:"Author"}),". An identification variable ranges over the abstract schema\ntype of an entity. An identification variable designates an instance of an entity abstract schema type or an\nelement of a collection of entity abstract schema type instances. Identification variables are existentially\nquantified in a query. An identification variable always designates a reference to a single value. It is declared\nin one of three ways:"]}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"in a range variable declaration,"}),"\n",(0,s.jsx)(i.li,{children:"in a join clause, or"}),"\n",(0,s.jsx)(i.li,{children:"in a collection member declaration."}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The identification variable declarations are evaluated from left to right in the ",(0,s.jsx)(i.code,{children:"FROM"})," clause, and an\nidentification variable declaration can use the result of a preceding identification variable declaration of the\nquery string."]}),"\n",(0,s.jsx)(i.h3,{id:"jpql-range-declarations",children:"JPQL Range Declarations"}),"\n",(0,s.jsxs)(i.p,{children:["The syntax for declaring an identification variable as a range variable is similar to that of SQL; optionally, it\nuses the ",(0,s.jsx)(i.code,{children:"AS"})," keyword:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"range_variable_declaration ::= abstract_schema_name [AS] identification_variable\n"})}),"\n",(0,s.jsxs)(i.p,{children:['Range variable declarations allow the developer to designate a "root" for objects which may not be reachable by\nnavigation. In order to select values by comparing more than one instance of an entity abstract schema type, more\nthan one identification variable ranging over the abstract schema type is needed in the ',(0,s.jsx)(i.code,{children:"FROM"})," clause."]}),"\n",(0,s.jsxs)(i.p,{children:['The following query returns magazines whose prices are greater than the price of magazines published by "Adventure"\npublishers. This example illustrates the use of two different identification variables in the ',(0,s.jsx)(i.code,{children:"FROM"})," clause, both\nof the abstract schema type ",(0,s.jsx)(i.code,{children:"Magazine"}),". The ",(0,s.jsx)(i.code,{children:"SELECT"}),' clause of this query determines that it is the magazines with\nprices greater than those of "Adventure" publisher\'s that are returned.']}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT DISTINCT mag1\nFROM Magazine mag1, Magazine mag2\nWHERE mag1.price > mag2.price AND mag2.publisher.name = 'Adventure'\n"})}),"\n",(0,s.jsx)(i.h3,{id:"jpql-path-expressions",children:"JPQL Path Expressions"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"An identification variable followed by the navigation operator (.) and a state-field or association-field is a\npath expression."})," The type of the path expression is the type computed as the result of navigation; that is, the\ntype of the state-field or association-field to which the expression navigates. Depending on navigability, a path\nexpression that leads to an association-field may be further composed. Path expressions can be composed from other\npath expressions if the original path expression evaluates to a single-valued type (not a collection) corresponding\nto an association-field. ",(0,s.jsxs)(i.strong,{children:['Path-expression navigability is composed using "inner join" semantics. That is, if the\nvalue of a non-terminal association-field in the path expression is ',(0,s.jsx)(i.code,{children:"null"}),", the path is considered to have no\nvalue, and does not participate in the determination of the result"]}),". The syntax for single-valued path expressions\nand collection-valued path expressions is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"single_valued_path_expression ::= state_field_path_expression | single_valued_association_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"state_field_path_expression ::= {identification_variable | single_valued_association_path_expression}.state_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"single_valued_association_path_expression ::= identification_variable.{single_valued_association_field.}*single_valued_association_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"collection_valued_path_expression ::= identification_variable.{single_valued_association_field.}*collection_valued_association_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"state_field ::= {embedded_class_state_field.}*simple_state_field"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["A single_valued_association_field is designated by the name of an association-field in a one-to-one or many-to-one\nrelationship. The type of a single_valued_association_field and thus a single_valued_association_path_expression is\nthe abstract schema type of the related entity. A collection_valued_association_field is designated by the name of\nan association-field in a one-to-many or a many-to-many relationship. The type of a\n",(0,s.jsx)(i.code,{children:"collection_valued_association_field"})," is a collection of values of the abstract schema type of the related entity.\nAn ",(0,s.jsx)(i.code,{children:"embedded_class_state_field"})," is designated by the name of an entity-state field that corresponds to an embedded\nclass. Navigation to a related entity results in a value of the related entity's abstract schema type."]}),"\n",(0,s.jsxs)(i.p,{children:["The evaluation of a path expression terminating in a state-field results in the abstract schema type corresponding\nto the Java type designated by the state-field. It is syntactically illegal to compose a path expression from a path\nexpression that evaluates to a collection. For example, if ",(0,s.jsx)(i.code,{children:"mag"})," designates ",(0,s.jsx)(i.code,{children:"Magazine"}),", the path expression\n",(0,s.jsx)(i.code,{children:"mag.articles.author"})," is illegal since navigation to authors results in a collection. This case should produce an\nerror when the query string is verified. To handle such a navigation, an identification variable must be declared\nin the ",(0,s.jsx)(i.code,{children:"FROM"})," clause to range over the elements of the articles collection. Another path expression must be used to\nnavigate over each such element in the ",(0,s.jsx)(i.code,{children:"WHERE"})," clause of the query, as in the following query, which returns all\nauthors that have any articles in any magazines:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT DISTINCT art.author\nFROM Magazine AS mag, IN(mag.articles) art\n"})}),"\n",(0,s.jsx)(i.h3,{id:"jpql-joins",children:"JPQL Joins"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsxs)(i.strong,{children:["An ",(0,s.jsx)(i.a,{href:"https://www.w3schools.com/sql/sql_join_inner.asp",children:"inner join"})," may be implicitly specified by the use of a\nartesian product in the FROM clause and a join condition in the ",(0,s.jsx)(i.code,{children:"WHERE"})," clause"]}),"."]}),"\n",(0,s.jsx)(i.p,{children:"The syntax for explicit join operations is as follows:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join ::= join_spec join_association_path_expression [AS] identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"fetch_join ::= join_spec FETCH join_association_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join_spec ::= [ LEFT [OUTER] | INNER ] JOIN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join_association_path_expression ::= join_collection_valued_path_expression | join_single_valued_association_path_expression"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"The following inner and outer join operation types are supported."}),"\n",(0,s.jsx)(i.h4,{id:"jpql-inner-joins-relationship-joins",children:"JPQL Inner Joins (Relationship Joins)"}),"\n",(0,s.jsx)(i.p,{children:"The syntax for the inner join operation is"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"[ INNER ] JOIN join_association_path_expression [AS] identification_variable\n"})}),"\n",(0,s.jsx)(i.p,{children:"For example, the query below joins over the relationship between publishers and magazines. This type of join\ntypically equates to a join over a foreign key relationship in the database."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT pub\nFROM Publisher pub JOIN pub.magazines mag\nWHERE pub.revenue > 1000000\n"})}),"\n",(0,s.jsx)(i.p,{children:"The keyword INNER may optionally be used:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT pub\nFROM Publisher pub INNER JOIN pub.magazines mag\nWHERE pub.revenue > 1000000\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This is equivalent to the following query using the earlier ",(0,s.jsx)(i.code,{children:"IN"})," construct. It selects those publishers with\nrevenue of over 1 million for which at least one magazine exists:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT OBJECT(pub)\nFROM Publisher pub, IN(pub.magazines) mag\nWHERE pub.revenue > 1000000\n"})}),"\n",(0,s.jsx)(i.h4,{id:"jpql-outer-joins",children:"JPQL Outer Joins"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsxs)(i.a,{href:"https://www.w3schools.com/sql/sql_join_left.asp",children:[(0,s.jsx)(i.code,{children:"LEFT JOIN"})," and ",(0,s.jsx)(i.code,{children:"LEFT OUTER JOIN"})," are synonymous"]}),". They enable the\nretrieval of a set of entities where matching values in the join condition may be absent. The syntax for a left\nouter join is"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"LEFT [OUTER] JOIN join_association_path_expression [AS] identification_variable\n"})}),"\n",(0,s.jsx)(i.p,{children:"For example:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT pub\nFROM Publisher pub LEFT JOIN pub.magazines mag\nWHERE pub.revenue > 1000000\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The keyword ",(0,s.jsx)(i.code,{children:"OUTER"})," may optionally be used:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT pub\nFROM Publisher pub LEFT OUTER JOIN pub.magazines mags\nWHERE pub.revenue > 1000000\n"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsxs)(i.strong,{children:["An important use case for ",(0,s.jsx)(i.code,{children:"LEFT JOIN"})," is in enabling the prefetching of related data items as a side effect of a\nquery. This is accomplished by specifying the ",(0,s.jsx)(i.code,{children:"LEFT JOIN"})," as a ",(0,s.jsx)(i.code,{children:"FETCH JOIN"})]}),"."]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-fetch-joins",children:"JPQL Fetch Joins"}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"FETCH JOIN"})," enables the fetching of an association as a side effect of the execution of a query. A ",(0,s.jsx)(i.code,{children:"FETCH JOIN"}),"\nis specified over an entity and its related entities. The syntax for a fetch join is"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"fetch_join ::= [ LEFT [OUTER] | INNER ] JOIN FETCH join_association_path_expression\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The association referenced by the right side of the ",(0,s.jsx)(i.code,{children:"FETCH JOIN"})," clause must be an association that belongs to an\nentity that is returned as a result of the query. It is not permitted to specify an identification variable for the\nentities referenced by the right side of the ",(0,s.jsx)(i.code,{children:"FETCH JOIN"})," clause, and hence references to the implicitly fetched\nentities cannot appear elsewhere in the query. The following query returns a set of magazines. As a side effect,\nthe associated articles for those magazines are also retrieved, even though they are not part of the explicit query\nresult. The persistent fields or properties of the articles that are eagerly fetched are fully initialized. The\ninitialization of the relationship properties of the articles that are retrieved is determined by the metadata for\nthe ",(0,s.jsx)(i.code,{children:"Article"})," entity class."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT mag\nFROM Magazine mag LEFT JOIN FETCH mag.articles\nWHERE mag.id = 1\n"})}),"\n",(0,s.jsx)(i.p,{children:"A fetch join has the same join semantics as the corresponding inner or outer join, except that the related objects\nspecified on the right-hand side of the join operation are not returned in the query result or otherwise referenced\nin the query. Hence, for example, if magazine id 1 has five articles, the above query returns five references to the\nmagazine 1 entity."}),"\n",(0,s.jsx)(i.h3,{id:"jpql-collection-member-declarations",children:"JPQL Collection Member Declarations"}),"\n",(0,s.jsxs)(i.p,{children:["An identification variable declared by a ",(0,s.jsx)(i.code,{children:"collection_member_declaration"})," ranges over values of a collection\nobtained by navigation using a path expression. Such a path expression represents a navigation involving the\nassociation-fields of an entity abstract schema type. Because a path expression can be based on another path\nexpression, the navigation can use the association-fields of related entities. An identification variable of a\ncollection member declaration is declared using a special operator, the reserved identifier ",(0,s.jsx)(i.code,{children:"IN"}),". The argument to\nthe ",(0,s.jsx)(i.code,{children:"IN"})," operator is a collection-valued path expression. The path expression evaluates to a collection type\nspecified as a result of navigation to a collection-valued association-field of an entity abstract schema type. The\nsyntax for declaring a collection member identification variable is as follows:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"collection_member_declaration ::= IN (collection_valued_path_expression) [AS] identification_variable\n"})}),"\n",(0,s.jsx)(i.p,{children:"For example, the query"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT DISTINCT mag\nFROM Magazine mag\n    JOIN mag.articles art\n    JOIN art.author auth\nWHERE auth.lastName = 'Grisham'\n"})}),"\n",(0,s.jsx)(i.p,{children:"may equivalently be expressed as follows, using the IN operator:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT DISTINCT mag\nFROM Magazine mag, IN(mag.articles) art\nWHERE art.author.lastName = 'Grisham'\n"})}),"\n",(0,s.jsxs)(i.p,{children:["In this example, articles is the name of an association-field whose value is a collection of instances of the\nabstract schema type ",(0,s.jsx)(i.code,{children:"Article"}),". The identification variable ",(0,s.jsx)(i.code,{children:"art"})," designates a member of this collection, a single\n",(0,s.jsx)(i.code,{children:"Article"})," abstract schema type instance. In this example, mag is an identification variable of the abstract schema\ntype ",(0,s.jsx)(i.code,{children:"Magazine"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"jpql-polymorphism",children:"JPQL Polymorphism"}),"\n",(0,s.jsxs)(i.p,{children:["Java Persistence queries are automatically polymorphic. The ",(0,s.jsx)(i.code,{children:"FROM"})," clause of a query designates not only instances\nof the specific entity classes to which the query explicitly refers but of subclasses as well. The instances\nreturned by a query include instances of the subclasses that satisfy the query criteria."]}),"\n",(0,s.jsxs)(i.h2,{id:"jpql-where-clause",children:["JPQL ",(0,s.jsx)(i.code,{children:"WHERE"})," Clause"]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"WHERE"})," clause of a query consists of a conditional expression used to select objects or values that satisfy the\nexpression. The ",(0,s.jsx)(i.code,{children:"WHERE"})," clause restricts the result of a select statement or the scope of an update or delete\noperation. A ",(0,s.jsx)(i.code,{children:"WHERE"})," clause is defined as follows:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"where_clause ::= WHERE conditional_expression\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"GROUP BY"})," construct enables the aggregation of values according to the properties of an entity class. The\n",(0,s.jsx)(i.code,{children:"HAVING"})," construct enables conditions to be specified that further restrict the query result as restrictions upon\nthe groups. The syntax of the ",(0,s.jsx)(i.code,{children:"HAVING"})," clause is as follows:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"having_clause ::= HAVING conditional_expression\n"})}),"\n",(0,s.jsx)(i.h3,{id:"jpql-conditional-expressions",children:"JPQL Conditional Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["The following sections describe the language constructs that can be used in a conditional expression of the ",(0,s.jsx)(i.code,{children:"WHERE"}),"\nclause or ",(0,s.jsx)(i.code,{children:"HAVING"})," clause. State-fields that are mapped in serialized form or as lobs may not be portably used in\nconditional expressions"]}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsx)(i.p,{children:"The implementation is not expected to perform such query operations involving such fields in memory rather than in\nthe database."})}),"\n",(0,s.jsx)(i.h4,{id:"jpql-literals",children:"JPQL Literals"}),"\n",(0,s.jsxs)(i.p,{children:["A string literal is enclosed in single quotes -- for example: 'literal'. A string literal that includes a single\nquote is represented by two single quotes -- for example: 'literal''s'. String literals in queries, like Java\nString literals, use unicode character encoding. The use of Java escape notation is not supported in query string\nliterals. Exact numeric literals support the use of Java integer literal syntax as well as SQL exact numeric\nliteral syntax. Approximate literals support the use Java floating point literal syntax as well as SQL approximate\nnumeric literal syntax. Enum literals support the use of Java enum literal syntax. ",(0,s.jsx)(i.strong,{children:"The enum class name must be\nspecified"}),". Appropriate suffixes may be used to indicate the specific type of a numeric literal in accordance with\nthe Java Language Specification. The boolean literals are TRUE and FALSE. Although predefined reserved literals\nappear in upper case, they are case insensitive."]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-identification-variables-wherehaving",children:"JPQL Identification Variables (WHERE/HAVING)"}),"\n",(0,s.jsxs)(i.p,{children:["All identification variables used in the ",(0,s.jsx)(i.code,{children:"WHERE"})," or ",(0,s.jsx)(i.code,{children:"HAVING"})," clause of a ",(0,s.jsx)(i.code,{children:"SELECT"})," or ",(0,s.jsx)(i.code,{children:"DELETE"})," statement must be\ndeclared in the ",(0,s.jsx)(i.code,{children:"FROM"})," clause, as described in ",(0,s.jsx)(i.a,{href:"#jpql-identification-variables",children:"JPQL Identification Variables"}),". The\nidentification variables used in the ",(0,s.jsx)(i.code,{children:"WHERE"})," clause of an ",(0,s.jsx)(i.code,{children:"UPDATE"})," statement must be declared in the ",(0,s.jsx)(i.code,{children:"UPDATE"}),"\nclause. Identification variables are existentially quantified in the ",(0,s.jsx)(i.code,{children:"WHERE"})," and ",(0,s.jsx)(i.code,{children:"HAVING"})," clause. This means that an\nidentification variable represents a member of a collection or an instance of an entity's abstract schema type. An\nidentification variable never designates a collection in its entirety."]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-path-expressions-wherehaving",children:"JPQL Path Expressions (WHERE/HAVING)"}),"\n",(0,s.jsxs)(i.p,{children:["It is illegal to use a ",(0,s.jsx)(i.code,{children:"collection_valued_path_expression"})," within a ",(0,s.jsx)(i.code,{children:"WHERE"})," or ",(0,s.jsx)(i.code,{children:"HAVING"})," clause as part of a\nconditional expression except in an ",(0,s.jsx)(i.code,{children:"empty_collection_comparison_expression"}),", in a ",(0,s.jsx)(i.code,{children:"collection_member_expression"}),",\nor as an argument to the ",(0,s.jsx)(i.code,{children:"SIZE"})," operator."]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-input-parameters",children:"JPQL Input Parameters"}),"\n",(0,s.jsxs)(i.p,{children:["Either positional or named parameters may be used. Positional and named parameters may not be mixed in a single\nquery. ",(0,s.jsxs)(i.strong,{children:["Input parameters can only be used in the ",(0,s.jsx)(i.code,{children:"WHERE"})," clause or ",(0,s.jsx)(i.code,{children:"HAVING"})," clause of a query"]}),"."]}),"\n",(0,s.jsx)(i.h5,{id:"jpql-positional-parameters",children:"JPQL Positional Parameters"}),"\n",(0,s.jsx)(i.p,{children:"The following rules apply to positional parameters."}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Input parameters are designated by the question mark (",(0,s.jsx)(i.code,{children:"?"}),") prefix followed by an integer. For example: ",(0,s.jsx)(i.code,{children:"?1"}),"."]}),"\n",(0,s.jsx)(i.li,{children:"Input parameters are numbered starting from 1. Note that the same parameter can be used more than once in the\nquery string and that the ordering of the use of parameters within the query string need not conform to the order\nof the positional parameters."}),"\n"]}),"\n",(0,s.jsx)(i.h5,{id:"jpql-named-parameters",children:"JPQL Named Parameters"}),"\n",(0,s.jsxs)(i.p,{children:['A named parameter is an identifier that is prefixed by the ":" symbol. It follows the rules for identifiers defined\nin ',(0,s.jsx)(i.a,{href:"#jpql-from-identifiers",children:"JPQL FROM Identifiers"}),". Named parameters are case sensitive."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT pub\nFROM Publisher pub\nWHERE pub.revenue > :rev\n"})}),"\n",(0,s.jsx)(i.h4,{id:"jpql-conditional-expression-composition",children:"JPQL Conditional Expression Composition"}),"\n",(0,s.jsx)(i.p,{children:"Conditional expressions are composed of other conditional expressions, comparison operations, logical operations,\npath expressions that evaluate to boolean values, boolean literals, and boolean input parameters. Arithmetic\nexpressions can be used in comparison expressions. Arithmetic expressions are composed of other arithmetic\nexpressions, arithmetic operations, path expressions that evaluate to numeric values, numeric literals, and numeric\ninput parameters. Arithmetic operations use numeric promotion. Standard bracketing () for ordering expression\nevaluation is supported. Conditional expressions are defined as follows:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"conditional_expression ::= conditional_term | conditional_expression OR conditional_term"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"conditional_term ::= conditional_factor | conditional_term AND conditional_factor"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"conditional_factor ::= [ NOT ] conditional_primary"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"conditional_primary ::= simple_cond_expression | (conditional_expression)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_cond_expression ::= comparison_expression | between_expression | like_expression | in_expression | null_comparison_expression | empty_collection_comparison_expression | collection_member_expression | exists_expression"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Aggregate functions can only be used in conditional expressions in a HAVING clause."}),"\n",(0,s.jsx)(i.h4,{id:"jpql-operators-and-operator-precedence",children:"JPQL Operators and Operator Precedence"}),"\n",(0,s.jsx)(i.p,{children:"The operators are listed below in order of decreasing precedence."}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Navigation operator (.)"}),"\n",(0,s.jsx)(i.li,{children:"Arithmetic operators: +, - unary *, / multiplication and division +, - addition and subtraction"}),"\n",(0,s.jsxs)(i.li,{children:["Comparison operators : ",(0,s.jsx)(i.code,{children:"="}),", ",(0,s.jsx)(i.code,{children:">"}),", ",(0,s.jsx)(i.code,{children:">="}),", ",(0,s.jsx)(i.code,{children:"<"}),", ",(0,s.jsx)(i.code,{children:"<="}),", ",(0,s.jsx)(i.code,{children:"<>"})," (not equal), ",(0,s.jsx)(i.code,{children:"[NOT] BETWEEN"}),", ",(0,s.jsx)(i.code,{children:"[NOT] LIKE"}),", ",(0,s.jsx)(i.code,{children:"[NOT] IN"}),", ",(0,s.jsx)(i.code,{children:"IS [NOT] NULL"}),", ",(0,s.jsx)(i.code,{children:"IS [NOT] EMPTY"}),", ",(0,s.jsx)(i.code,{children:"[NOT] MEMBER [OF]"})]}),"\n",(0,s.jsxs)(i.li,{children:["Logical operators: ",(0,s.jsx)(i.code,{children:"NOT"})," ",(0,s.jsx)(i.code,{children:"AND"})," ",(0,s.jsx)(i.code,{children:"OR"})]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"The following sections describe other operators used in specific expressions."}),"\n",(0,s.jsx)(i.h4,{id:"jpql-between-expressions",children:"JPQL Between Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["The syntax for the use of the comparison operator ",(0,s.jsx)(i.code,{children:"[NOT] BETWEEN"})," in a conditional expression is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"arithmetic_expression [NOT] BETWEEN arithmetic_expression AND arithmetic_expression | string_expression [NOT] BETWEEN string_expression AND string_expression | datetime_expression [NOT] BETWEEN datetime_expression AND datetime_expression"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The BETWEEN expression ",(0,s.jsx)(i.code,{children:"x BETWEEN y AND z"})," is semantically equivalent to ",(0,s.jsx)(i.code,{children:"y <= x AND x <= z"}),","]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-in-expressions",children:"JPQL In Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["The syntax for the use of the comparison operator ",(0,s.jsx)(i.code,{children:"[NOT] IN"})," in a conditional expression is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"in_expression ::= state_field_path_expression [NOT] IN ( in_item {, in_item}* | subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"in_item ::= literal | input_parameter"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"state_field_path_expression"})," must have a"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"string,"}),"\n",(0,s.jsx)(i.li,{children:"numeric, or"}),"\n",(0,s.jsx)(i.li,{children:"enum value."}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The literal and/or input_parameter values must be like the same abstract schema type of the\n",(0,s.jsx)(i.code,{children:"state_field_path_expression"})," in type. The results of the subquery must be like the same abstract schema type of the\n",(0,s.jsx)(i.code,{children:"state_field_path_expression"})," in type. For example,, ",(0,s.jsx)(i.code,{children:"o.country IN ('UK', 'US', 'France')"})]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-like-expressions",children:"JPQL Like Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["The syntax for the use of the comparison operator ",(0,s.jsx)(i.code,{children:"[NOT] LIKE"})," in a conditional expression is as follows:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"string_expression [NOT] LIKE pattern_value [ESCAPE escape_character]\n"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsxs)(i.strong,{children:["The ",(0,s.jsx)(i.code,{children:"string_expression"})," must have a string value"]}),". The ",(0,s.jsx)(i.code,{children:"pattern_value"})," is a string literal or a string-valued\ninput parameter in which an underscore (",(0,s.jsx)(i.code,{children:"_"}),") stands for any single character, a percent (",(0,s.jsx)(i.code,{children:"%"}),") character stands for\nany sequence of characters (including the empty sequence), and all other characters stand for themselves. The\noptional ",(0,s.jsx)(i.code,{children:"escape_character"})," is a single-character string literal or a character-valued input parameter (i.e., char\nor Character) and is used to escape the special meaning of the underscore and percent characters in pattern_value. Examples are:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"asentence.word LIKE 'l_se'"})," - is true for 'lose' and false for 'loose'"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"aword.underscored LIKE '\\_%' ESCAPE '\\'"})," - is true for '_foo' and false for 'bar'"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-null-comparison-expressions",children:"JPQL Null Comparison Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["The syntax for the use of the comparison operator ",(0,s.jsx)(i.code,{children:"IS NULL"})," in a conditional expression is as follows:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"{single_valued_path_expression | input_parameter } IS [NOT] NULL\n"})}),"\n",(0,s.jsxs)(i.p,{children:["A null comparison expression tests whether or not the single-valued path expression or input parameter is a ",(0,s.jsx)(i.code,{children:"NULL"}),"\nvalue."]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-empty-collection-comparison-expressions",children:"JPQL Empty Collection Comparison Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["The syntax for the use of the comparison operator ",(0,s.jsx)(i.code,{children:"IS EMPTY"})," in an ",(0,s.jsx)(i.code,{children:"empty_collection_comparison_expression"})," is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"collection_valued_path_expression IS [NOT] EMPTY"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"This expression tests whether or not the collection designated by the collection-valued path expression is empty\n(i.e, has no elements)."}),"\n",(0,s.jsx)(i.p,{children:"For example, the following query will return all magazines that don't have any articles at all:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT mag\nFROM Magazine mag\nWHERE mag.articles IS EMPTY\n"})}),"\n",(0,s.jsx)(i.p,{children:"If the value of the collection-valued path expression in an empty collection comparison expression is unknown, the\nvalue of the empty comparison expression is unknown."}),"\n",(0,s.jsx)(i.h4,{id:"jpql-collection-member-expressions",children:"JPQL Collection Member Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["The use of the comparison ",(0,s.jsx)(i.code,{children:"collection_member_expression"})," is as follows: syntax for the operator MEMBER OF in an"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"collection_member_expression ::= entity_expression [NOT] MEMBER [OF] collection_valued_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"entity_expression ::= single_valued_association_path_expression | simple_entity_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_entity_expression ::= identification_variable | input_parameter"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["This expression tests whether the designated value is a member of the collection specified by the collection-valued\npath expression. If the collection valued path expression designates an empty collection, the value of the ",(0,s.jsx)(i.code,{children:"MEMBER OF"})," expression is ",(0,s.jsx)(i.code,{children:"FALSE"})," and the value of the ",(0,s.jsx)(i.code,{children:"NOT MEMBER OF"})," expression is ",(0,s.jsx)(i.code,{children:"TRUE"}),". Otherwise, if the value of the\ncollection-valued path expression or single-valued association-field path expression in the collection member\nexpression is ",(0,s.jsx)(i.code,{children:"NULL"})," or unknown, the value of the collection member expression is unknown."]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-exists-expressions",children:"JPQL Exists Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["An ",(0,s.jsx)(i.code,{children:"EXISTS"})," expression is a predicate that is true only if the result of the subquery consists of one or more\nvalues and that is false otherwise. The syntax of an exists expression is"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"exists_expression ::= [NOT] EXISTS (subquery)"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The use of the reserved word ",(0,s.jsx)(i.code,{children:"OF"})," is optional in this expression."]}),"\n",(0,s.jsx)(i.h4,{id:"jpql-all-or-any-expressions",children:"JPQL All or Any Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["An ALL conditional expression is a predicate that is true if the comparison operation is true for all values in the\nresult of the subquery or ",(0,s.jsx)(i.strong,{children:"the result of the subquery is empty"}),". An ALL conditional expression is false if the\nresult of the comparison is false for at least one row, and is unknown if neither true nor false. An ANY\nconditional expression is a predicate that is true if the comparison operation is true for some value in the result\nof the subquery. An ANY conditional expression is false ",(0,s.jsx)(i.strong,{children:"if the result of the subquery is empty"})," or if the\ncomparison operation is false for every value in the result of the subquery, and is unknown if neither true nor\nfalse. ",(0,s.jsx)(i.strong,{children:"The keyword SOME is synonymous with ANY"}),". The comparison operators used with ALL or ANY conditional\nexpressions are ",(0,s.jsx)(i.code,{children:"="}),", ",(0,s.jsx)(i.code,{children:"<"}),", ",(0,s.jsx)(i.code,{children:"<="}),", ",(0,s.jsx)(i.code,{children:">"}),", ",(0,s.jsx)(i.code,{children:">="}),", ",(0,s.jsx)(i.code,{children:"<>"}),". The result of the subquery must be like that of the other argument to\nthe comparison operator in type."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"all_or_any_expression ::= { ALL | ANY | SOME} (subquery)\n"})}),"\n",(0,s.jsx)(i.p,{children:"The following example select the authors who make the highest salary for their magazine:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT auth\nFROM Author auth\nWHERE auth.salary >= ALL(SELECT a.salary FROM Author a WHERE a.magazine = auth.magazine)\n"})}),"\n",(0,s.jsx)(i.h4,{id:"jpql-subqueries",children:"JPQL Subqueries"}),"\n",(0,s.jsxs)(i.p,{children:["Subqueries may be used in the ",(0,s.jsx)(i.code,{children:"WHERE"})," or ",(0,s.jsx)(i.code,{children:"HAVING"})," clause. The syntax for subqueries is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"subquery ::= simple_select_clause subquery_from_clause [where_clause] [groupby_clause] [having_clause]"})}),"\n",(0,s.jsx)(i.li,{children:"Subqueries are restricted to the WHERE and HAVING clauses in this release. Support for subqueries in the FROM\nclause will be considered in a later release of the specification."}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_select_clause ::= SELECT [DISTINCT] simple_select_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"subquery_from_clause ::= FROM subselect_identification_variable_declaration {, subselect_identification_variable_declaration}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"subselect_identification_variable_declaration ::= identification_variable_declaration | association_path_expression [AS] identification_variable | collection_member_declaration"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_select_expression ::= single_valued_path_expression | aggregate_expression | identification_variable"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Examples:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT DISTINCT auth\nFROM Author auth\nWHERE EXISTS (\n    SELECT spouseAuth\n    FROM Author spouseAuth\n    WHERE spouseAuth = auth.spouse\n)\n"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT mag\nFROM Magazine mag\nWHERE (SELECT COUNT(art) FROM mag.articles art) > 10\n"})}),"\n",(0,s.jsx)(i.h4,{id:"jpql-functional-expressions",children:"JPQL Functional Expressions"}),"\n",(0,s.jsxs)(i.p,{children:["The JPQL includes the following built-in functions, which may be used in the ",(0,s.jsx)(i.code,{children:"WHERE"})," or ",(0,s.jsx)(i.code,{children:"HAVING"})," clause of a query.\nIf the value of any argument to a functional expression is null or unknown, the value of the functional expression\nis unknown."]}),"\n",(0,s.jsx)(i.h5,{id:"jpql-string-functions",children:"JPQL String Functions"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"functions_returning_strings ::= CONCAT(string_primar y, string_primary) | SUBSTRING(string_primar y, simple_arithmetic_expression, simple_arithmetic_expression) | TRIM([[trim_specification] [trim_character] FROM] string_primary) | LOWER(string_primar y) | UPPER(string_primar y)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"trim_specification ::= LEADING | TRAILING | BOTH"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"functions_returning_numerics ::= LENGTH(string_primar y) | LOCATE(string_primar y, string_primar y[, simple_arithmetic_expression])"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"CONCAT"})," function returns a string that is a concatenation of its arguments. The second and third arguments of\nthe ",(0,s.jsx)(i.code,{children:"SUBSTRING"})," function denote the starting position and length of the substring to be returned. These arguments\nare integers. The first position of a string is denoted by 1. The ",(0,s.jsx)(i.code,{children:"SUBSTRING"})," function returns a string. The ",(0,s.jsx)(i.code,{children:"TRIM"}),"\nfunction trims the specified character from a string. If the character to be trimmed is not specified, it is\nassumed to be space (or blank). The optional ",(0,s.jsx)(i.code,{children:"trim_character"})," is a single-character string literal or a\ncharacter-valued input parameter (i.e., char or Character). If a trim specification is not provided, BOTH is\nassumed. The ",(0,s.jsx)(i.code,{children:"TRIM"})," function returns the trimmed string. The ",(0,s.jsx)(i.code,{children:"LOWER"})," and ",(0,s.jsx)(i.code,{children:"UPPER"})," functions convert a string to\nlower and upper case, respectively. They return a string. The ",(0,s.jsx)(i.code,{children:"LOCATE"}),' function returns the position of a given\nstring within a string, starting the search at a specified position. It returns the first position at which the\nstring was found as an integer. The first argument is the string to be located; the second argument is the string\nto be searched; the optional third argument is an integer that represents the string position at which the search\nis started (by default, the beginning of the string to be searched). The first position in a string is denoted by\n"1." If the string is not found, 0 is returned. The ',(0,s.jsx)(i.code,{children:"LENGTH"}),' function returns the length of the string in characters\n"2." as an integer.']}),"\n",(0,s.jsx)(i.h5,{id:"jpql-arithmetic-functions",children:"JPQL Arithmetic Functions"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"functions_returning_numerics ::= ABS(simple_arithmetic_expression) | SQRT(simple_arithmetic_expression) | MOD(simple_arithmetic_expression, simple_arithmetic_expression) | SIZE(collection_valued_path_expression)\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"ABS"})," function takes a numeric argument and returns a number (integer, float, or double) of the same type as the\nargument to the function. The ",(0,s.jsx)(i.code,{children:"SQRT"})," function takes a numeric argument and returns a double."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"MOD"})," function takes two integer arguments and returns an integer. The ",(0,s.jsx)(i.code,{children:"SIZE"})," function returns an integer\nvalue, the number of elements of the collection. If the collection is empty, the ",(0,s.jsx)(i.code,{children:"SIZE"})," function evaluates to zero.\nNumeric arguments to these functions may correspond to the numeric Java object types as well as the primitive\nnumeric types."]}),"\n",(0,s.jsx)(i.h5,{id:"jpql-datetime-functions",children:"JPQL Datetime Functions"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"functions_returning_datetime:= CURRENT_DATE | CURRENT_TIME | CURRENT_TIMESTAMP\n"})}),"\n",(0,s.jsx)(i.p,{children:"The datetime functions return the value of current date, time, and timestamp on the database server."}),"\n",(0,s.jsxs)(i.h2,{id:"jpql-group-by-having",children:["JPQL ",(0,s.jsx)(i.code,{children:"GROUP BY"}),", ",(0,s.jsx)(i.code,{children:"HAVING"})]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"GROUP BY"})," construct enables the aggregation of values according to a set of properties. The ",(0,s.jsx)(i.code,{children:"HAVING"})," construct\nenables conditions to be specified that further restrict the query result. ",(0,s.jsx)(i.strong,{children:"Such conditions are restrictions upon\nthe groups"}),". The syntax of the ",(0,s.jsx)(i.code,{children:"GROUP BY"})," and ",(0,s.jsx)(i.code,{children:"HAVING"})," clauses is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"groupby_clause ::= GROUP BY groupby_item {, groupby_item}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"groupby_item ::= single_valued_path_expression | identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"having_clause ::= HAVING conditional_expression"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["If a query contains both a ",(0,s.jsx)(i.code,{children:"WHERE"})," clause and a ",(0,s.jsx)(i.code,{children:"GROUP BY"})," clause, the effect is that of first applying the where\nclause, and then forming the groups and filtering them according to the ",(0,s.jsx)(i.code,{children:"HAVING"})," clause. The ",(0,s.jsx)(i.code,{children:"HAVING"})," clause causes\nthose groups to be retained that satisfy the condition of the ",(0,s.jsx)(i.code,{children:"HAVING"})," clause. The requirements for the ",(0,s.jsx)(i.code,{children:"SELECT"}),"\nclause when ",(0,s.jsx)(i.code,{children:"GROUP BY"})," is used follow those of SQL: namely, ",(0,s.jsxs)(i.strong,{children:["any item that appears in the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause (other\nthan as an argument to an aggregate function) must also appear in the ",(0,s.jsx)(i.code,{children:"GROUP BY"})," clause"]}),". In forming the groups,\nnull values are treated as the same for grouping purposes. Grouping by an entity is permitted. In this case, the\nentity must contain no serialized state fields or lob-valued state fields. The ",(0,s.jsx)(i.code,{children:"HAVING"})," clause must specify search\nconditions over the grouping items or aggregate functions that apply to grouping items."]}),"\n",(0,s.jsxs)(i.h2,{id:"jpql-select-clause",children:["JPQL ",(0,s.jsx)(i.code,{children:"SELECT"})," Clause"]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"SELECT"})," clause denotes the query result. More than one value may be returned from the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause of a\nquery. The ",(0,s.jsx)(i.code,{children:"SELECT"})," clause may contain one or more of the following elements:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"a single range variable or identification variable that ranges over an entity abstract schema type,"}),"\n",(0,s.jsx)(i.li,{children:"a single-valued path expression,"}),"\n",(0,s.jsx)(i.li,{children:"an aggregate select expression,"}),"\n",(0,s.jsx)(i.li,{children:"a constructor expression."}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"SELECT"})," clause has the following syntax:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"select_clause ::= SELECT [DISTINCT] select_expression {, select_expression}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"select_expression ::= single_valued_path_expression | aggregate_expression | identification_variable | OBJECT(identification_variable) | constructor_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"constructor_expression ::= NEW constructor_name ( constructor_item {, constructor_item}* )"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"constructor_item ::= single_valued_path_expression | aggregate_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"aggregate_expression ::= { AVG | MAX | MIN | SUM } ([DISTINCT] state_field_path_expression) | COUNT ([DISTINCT] identification_variable | state_field_path_expression | single_valued_association_path_expression)"})}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"For example:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT pub.id, pub.revenue\nFROM Publisher pub JOIN pub.magazines mag\nWHERE mag.price > 5.00\n"})}),"\n",(0,s.jsxs)(i.admonition,{type:"warning",children:[(0,s.jsxs)(i.p,{children:["\u26a0\ufe0f Note that the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause must be specified to return only single-valued expressions. The query below is\ntherefore not valid"]}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-text",children:"SELECT mag.authors\nFROM Magazine AS mag\n"})})]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"DISTINCT"})," keyword is used to specify that duplicate values must be eliminated from the query result. If\n",(0,s.jsx)(i.code,{children:"DISTINCT"})," is not specified, duplicate values are not eliminated. Standalone identification variables in the\n",(0,s.jsx)(i.code,{children:"SELECT"})," clause may optionally be qualified by the ",(0,s.jsx)(i.code,{children:"OBJECT"})," operator. The ",(0,s.jsx)(i.code,{children:"SELECT"})," clause must not use the ",(0,s.jsx)(i.code,{children:"OBJECT"}),"\noperator to qualify path expressions."]}),"\n",(0,s.jsxs)(i.h3,{id:"jpql-result-type-of-the-select-clause",children:["JPQL Result Type of the ",(0,s.jsx)(i.code,{children:"SELECT"})," Clause"]}),"\n",(0,s.jsxs)(i.p,{children:["The type of the query result specified by the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause of a query is an entity abstract schema type, a\nstate-field type, the result of an aggregate function, the result of a construction operation, or some sequence of\nthese. The result type of the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause is defined by the the result types of the ",(0,s.jsx)(i.code,{children:"select_expressions"}),"\ncontained in it. When multiple ",(0,s.jsx)(i.code,{children:"select_expressions"})," are used in the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause, the result of the query is of\ntype ",(0,s.jsx)(i.code,{children:"Object[]"}),", and the elements in this result correspond in order to the order of their specification in the\n",(0,s.jsx)(i.code,{children:"SELECT"})," clause and in type to the result types of each of the ",(0,s.jsx)(i.code,{children:"select_expressions"}),". The type of the result of a\n",(0,s.jsx)(i.code,{children:"select_expression"})," is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["A ",(0,s.jsx)(i.code,{children:"single_valued_path_expression"})," that is a ",(0,s.jsx)(i.code,{children:"state_field_path_expression"})," results in an object of the same type\nas the corresponding state field of the entity. If the state field of the entity is a primitive type, the\ncorresponding object type is returned."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"single_valued_path_expression"})," that is a ",(0,s.jsx)(i.code,{children:"single_valued_association_path_expression"})," results in an entity object\nof the type of the relationship field or the subtype of the relationship field of the entity object as determined\nby the object/relational mapping."]}),"\n",(0,s.jsxs)(i.li,{children:["The result type of an ",(0,s.jsx)(i.code,{children:"identification_variable"})," is the type of the entity to which that identification variable\ncorresponds or a subtype as determined by the object/relational mapping."]}),"\n",(0,s.jsxs)(i.li,{children:["The result type of ",(0,s.jsx)(i.code,{children:"aggregate_expression"})," is defined in ",(0,s.jsx)(i.a,{href:"#jpql-aggregate-functions",children:"JPQL Aggregate Functions"})]}),"\n",(0,s.jsxs)(i.li,{children:["The result type of a ",(0,s.jsx)(i.code,{children:"constructor_expression"})," is the type of the class for which the constructor is defined. The\ntypes of the arguments to the constructor are defined by the above rules."]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"jpql-constructor-expressions",children:"JPQL Constructor Expressions"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsxs)(i.strong,{children:["In the ",(0,s.jsx)(i.code,{children:"SELECT"})," Clause a constructor may be used in the ",(0,s.jsx)(i.code,{children:"SELECT"})," list to return one or more Java instances. The\nspecified class is not required to be an entity or to be mapped to the database. The constructor name must be fully\nqualified"]}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["If an entity class name is specified in the ",(0,s.jsx)(i.code,{children:"SELECT NEW"})," clause, the resulting entity instances are in the new\nstate."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-sql",children:"SELECT NEW com.company.PublisherInfo(pub.id, pub.revenue, mag.price)\nFROM Publisher pub JOIN pub.magazines mag\nWHERE mag.price > 5.00\n"})}),"\n",(0,s.jsx)(i.h3,{id:"jpql-null-values-in-the-query-result",children:"JPQL Null Values in the Query Result"}),"\n",(0,s.jsxs)(i.p,{children:["If the result of a query corresponds to an association-field or state-field whose value is null, that null value is\nreturned in the result of the query method. The ",(0,s.jsx)(i.code,{children:"IS NOT NULL"})," construct can be used to eliminate such null values\nfrom the result set of the query."]}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsx)(i.p,{children:"State-field types defined in terms of Java numeric primitive types cannot produce NULL values in the query result.\nA query that returns such a state-field type as a result type must not return a null value."})}),"\n",(0,s.jsx)(i.h3,{id:"jpql-aggregate-functions",children:"JPQL Aggregate Functions"}),"\n",(0,s.jsxs)(i.p,{children:["In the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause the result of a query may be the result of an aggregate function applied to a path\nexpression. The following aggregate functions can be used in the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause of a query:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"AVG"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"COUNT"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"MAX"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"MIN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"SUM"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["For all aggregate functions except ",(0,s.jsx)(i.code,{children:"COUNT"}),", the path expression that is the argument to the aggregate function must\nterminate in a state-field. The path expression argument to ",(0,s.jsx)(i.code,{children:"COUNT"})," may terminate in either a state-field or an\nassociation-field, or the argument to ",(0,s.jsx)(i.code,{children:"COUNT"})," may be an identification variable. Arguments to the functions ",(0,s.jsx)(i.code,{children:"SUM"}),"\nand ",(0,s.jsx)(i.code,{children:"AVG"})," must be numeric. Arguments to the functions ",(0,s.jsx)(i.code,{children:"MAX"})," and ",(0,s.jsx)(i.code,{children:"MIN"})," must correspond to orderable state-field\ntypes (i.e., numeric types, string types, character types, or date types). The Java type that is contained in the\nresult of a query using an aggregate function is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"COUNT"})," returns ",(0,s.jsx)(i.code,{children:"Long"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"MAX"})," & ",(0,s.jsx)(i.code,{children:"MIN"})," return the type of the state-field to which they are applied."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"AVG"})," returns ",(0,s.jsx)(i.code,{children:"Double"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"SUM"})," returns ",(0,s.jsx)(i.code,{children:"Long"})," when applied to state-fields of integral types (other than ",(0,s.jsx)(i.code,{children:"BigInteger"}),"); ",(0,s.jsx)(i.code,{children:"Double"})," when\napplied to state-fields of floating point types; ",(0,s.jsx)(i.code,{children:"BigInteger"})," when applied to state-fields of type ",(0,s.jsx)(i.code,{children:"BigInteger"}),";\nand ",(0,s.jsx)(i.code,{children:"BigDecimal"})," when applied to state-fields of type ",(0,s.jsx)(i.code,{children:"BigDecimal"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["If ",(0,s.jsx)(i.code,{children:"SUM"}),", ",(0,s.jsx)(i.code,{children:"AVG"}),", ",(0,s.jsx)(i.code,{children:"MAX"}),", or ",(0,s.jsx)(i.code,{children:"MIN"})," is used, and there are no values to which the aggregate function can be applied,\nthe result of the aggregate function is ",(0,s.jsx)(i.code,{children:"NULL"}),". If ",(0,s.jsx)(i.code,{children:"COUNT"})," is used, and there are no values to which ",(0,s.jsx)(i.code,{children:"COUNT"})," can be\napplied, the result of the aggregate function is 0."]}),"\n",(0,s.jsxs)(i.p,{children:["The argument to an aggregate function may be preceded by the keyword ",(0,s.jsx)(i.code,{children:"DISTINCT"})," to specify that duplicate values\nare to be eliminated before the aggregate function is applied. Null values are eliminated before the aggregate\nfunction is applied, regardless of whether the keyword ",(0,s.jsx)(i.code,{children:"DISTINCT"})," is specified."]}),"\n",(0,s.jsxs)(i.h2,{id:"jpql-order-by-clause",children:["JPQL ",(0,s.jsx)(i.code,{children:"ORDER BY"})," Clause"]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"ORDER BY"})," clause allows the objects or values that are returned by the query to be ordered. The syntax of the\n",(0,s.jsx)(i.code,{children:"ORDER BY"})," clause is"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"orderby_clause ::= ORDER BY orderby_item {, orderby_item}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"orderby_item ::= state_field_path_expression [ASC | DESC]"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["It is legal to specify ",(0,s.jsx)(i.code,{children:"DISTINCT"})," with ",(0,s.jsx)(i.code,{children:"MAX"})," or ",(0,s.jsx)(i.code,{children:"MIN"}),", but it does not affect the result."]}),"\n",(0,s.jsxs)(i.p,{children:["When the ",(0,s.jsx)(i.code,{children:"ORDER BY"})," clause is used in a query, each element of the ",(0,s.jsx)(i.code,{children:"SELECT"})," clause of the query must be one of the\nfollowing:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["an identification variable x, optionally denoted as ",(0,s.jsx)(i.code,{children:"OBJECT(x)"}),","]}),"\n",(0,s.jsxs)(i.li,{children:["a ",(0,s.jsx)(i.code,{children:"single_valued_association_path_expression"}),", or a ",(0,s.jsx)(i.code,{children:"state_field_path_expression"}),". For example:\n",(0,s.jsx)(i.code,{children:"SELECT pub FROM Publisher pub JOIN pub.magazines mag ORDER BY o.revenue, o.name"})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["If more than one orderby-item is specified, the left-to-right sequence of the orderby-item elements determines the\nprecedence, whereby the leftmost orderby-item has highest precedence. The keyword ",(0,s.jsx)(i.code,{children:"ASC"})," specifies that ascending\nordering be used; the keyword ",(0,s.jsx)(i.code,{children:"DESC"})," specifies that descending ordering be used. Ascending ordering is the default.\nSQL rules for the ordering of null values apply: that is, all null values must appear before all non-null values in\nthe ordering or all null values must appear after all non-null values in the ordering, but it is not specified\nwhich. The ordering of the query result is preserved in the result of the query method if the ",(0,s.jsx)(i.code,{children:"ORDER BY"})," clause is\nused."]}),"\n",(0,s.jsx)(i.h2,{id:"jpql-bulk-update-and-delete",children:"JPQL Bulk Update and Delete"}),"\n",(0,s.jsxs)(i.p,{children:["Operations Bulk update and delete operations apply to entities of a single entity class (together with its\nsubclasses, if any). Only one entity abstract schema type may be specified in the ",(0,s.jsx)(i.code,{children:"FROM"})," or ",(0,s.jsx)(i.code,{children:"UPDATE"})," clause. The\nsyntax of these operations is as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"update_statement ::= update_clause [where_clause]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"update_clause ::= UPDATE abstract_schema_name [[AS] identification_variable] SET update_item {, update_item}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"update_item ::= [identification_variable.]{state_field | single_valued_association_field} = new_value"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"new_value ::= simple_arithmetic_expression | string_primary | datetime_primary | boolean_primary | enum_primary simple_entity_expression | NULL"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"delete_statement ::= delete_clause [where_clause]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"delete_clause ::= DELETE FROM abstract_schema_name [[AS] identification_variable]"})}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The syntax of the ",(0,s.jsx)(i.code,{children:"WHERE"})," clause is described in ",(0,s.jsx)(i.a,{href:"#jpql-where-clause",children:"JPQL WHERE Clause"}),". A delete operation only\napplies to entities of the specified class and its subclasses. It does not cascade to related entities. The\n",(0,s.jsx)(i.code,{children:"new_value"})," specified for an update operation must be compatible in type with the state-field to which it is\nassigned. Bulk update maps directly to a database update operation, bypassing optimistic locking checks. Portable\napplications must manually update the value of the version column, if desired, and/or manually validate the value\nof the version column. ",(0,s.jsx)(i.strong,{children:"The persistence context is not synchronized with the result of the bulk update or delete.\nCaution should be used when executing bulk update or delete operations because they may result in inconsistencies\nbetween the database and the entities in the active persistence context. In general, bulk update and delete\noperations should only be performed within a separate transaction or at the beginning of a transaction (before\nentities have been accessed whose state might be affected by such operations)"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"jpql-null-values",children:"JPQL Null Values"}),"\n",(0,s.jsxs)(i.p,{children:["When the target of a reference does not exist in the database, its value is regarded as ",(0,s.jsx)(i.code,{children:"NULL"}),". SQL 92 NULL\nsemantics defines the evaluation of conditional expressions containing NULL values. The following is a brief\ndescription of these semantics:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Comparison or arithmetic operations with a NULL value always yield an unknown value."})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Two NULL values are not considered to be equal, the comparison yields an unknown value."})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Comparison or arithmetic operations with an unknown value always yield an unknown value."})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"The IS NULL and IS NOT NULL operators convert a NULL state-field or single-valued association-field value into the respective TRUE or FALSE value."})}),"\n"]}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:['The JPQL defines the empty string, "", as a string with 0 length, which is not equal to a ',(0,s.jsx)(i.code,{children:"NULL"})," value. However,\n",(0,s.jsx)(i.code,{children:"NULL"})," values and empty strings may not always be distinguished when queries are mapped to some databases.\nApplication developers should therefore not rely on the semantics of query comparisons involving the empty string\nand ",(0,s.jsx)(i.code,{children:"NULL"})," value."]})}),"\n",(0,s.jsx)(i.h2,{id:"jpql-equality-and-comparison-semantics",children:"JPQL Equality and Comparison Semantics"}),"\n",(0,s.jsxs)(i.p,{children:["Only the values of like types are permitted to be compared. A type is like another type if they correspond to the\nsame Java language type, or if one is a primitive Java language type and the other is the wrappered Java class type\nequivalent (e.g., ",(0,s.jsx)(i.code,{children:"int"})," and ",(0,s.jsx)(i.code,{children:"Integer"})," are like types in this sense). There is one exception to this rule: it is\nvalid to compare numeric values for which the rules of numeric promotion apply. Conditional expressions attempting\nto compare non-like type values are disallowed except for this numeric case. Note that the arithmetic operators and\ncomparison operators are permitted to be applied to state-fields and input parameters of the wrappered Java class\nequivalents to the primitive numeric Java types. Two entities of the same abstract schema type are equal if and\nonly if they have the same primary key value. Only equality/inequality comparisons over enums are required to be\nsupported."]}),"\n",(0,s.jsx)(i.h2,{id:"the-complete-jpql-bnf",children:"The Complete JPQL BNF"}),"\n",(0,s.jsx)(i.p,{children:"The following is the BNF for the Java Persistence query language, from section 4.14 of the JSR 220 specification."}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"QL_statement ::= select_statement | update_statement | delete_statement"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"select_statement ::= select_clause from_clause [where_clause] [groupby_clause] [having_clause] [orderby_clause]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"update_statement ::= update_clause [where_clause]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"delete_statement ::= delete_clause [where_clause]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"from_clause ::= FROM identification_variable_declaration {, {identification_variable_declaration | collection_member_declaration}}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"identification_variable_declaration ::= range_variable_declaration { join | fetch_join }*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"range_variable_declaration ::= abstract_schema_name [AS] identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join ::= join_spec join_association_path_expression [AS] identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"fetch_join ::= join_spec FETCH join_association_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"association_path_expression ::= collection_valued_path_expression | single_valued_association_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join_spec ::= [LEFT [OUTER]|INNER] JOIN"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join_association_path_expression ::= join_collection_valued_path_expression | join_single_valued_association_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join_collection_valued_path_expression ::= identification_variable.collection_valued_association_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"join_single_valued_association_path_expression ::= identification_variable.single_valued_association_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"collection_member_declaration ::= IN (collection_valued_path_expression) [AS] identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"single_valued_path_expression ::= state_field_path_expression | single_valued_association_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"state_field_path_expression ::= {identification_variable | single_valued_association_path_expression}.state_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"single_valued_association_path_expression ::= identification_variable.{single_valued_association_field.}* single_valued_association_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"collection_valued_path_expression ::= identification_variable.{single_valued_association_field.}*collection_valued_association_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"state_field ::= {embedded_class_state_field.}*simple_state_field"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"update_clause ::= UPDATE abstract_schema_name [[AS] identification_variable] SET update_item {, update_item}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"update_item ::= [identification_variable.]{state_field | single_valued_association_field}= new_value"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"new_value ::= simple_arithmetic_expression | string_primary | datetime_primary | boolean_primary | enum_primary simple_entity_expression | NULL"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"delete_clause ::= DELETE FROM abstract_schema_name [[AS] identification_variable]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"select_clause ::= SELECT [DISTINCT] select_expression {, select_expression}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"select_expression ::= single_valued_path_expression | aggregate_expression | identification_variable | OBJECT(identification_variable)| constructor_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"constructor_expression ::= NEW constructor_name( constructor_item {, constructor_item}*)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"constructor_item ::= single_valued_path_expression | aggregate_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"aggregate_expression ::= {AVG |MAX |MIN |SUM}([DISTINCT] state_field_path_expression) | COUNT ([DISTINCT] identification_variable | state_field_path_expression | single_valued_association_path_expression)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"where_clause ::= WHERE conditional_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"groupby_clause ::= GROUP BY groupby_item {, groupby_item}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"groupby_item ::= single_valued_path_expression | identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"having_clause ::= HAVING conditional_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"orderby_clause ::= ORDER BY orderby_item {, orderby_item}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"orderby_item ::= state_field_path_expression [ASC |DESC ]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"subquery ::= simple_select_clause subquery_from_clause [where_clause] [groupby_clause] [having_clause]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"subquery_from_clause ::= FROM subselect_identification_variable_declaration {, subselect_identification_variable_declaration}*"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"subselect_identification_variable_declaration ::= identification_variable_declaration | association_path_expression [AS] identification_variable | collection_member_declaration"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_select_clause ::= SELECT [DISTINCT] simple_select_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_select_expression ::= single_valued_path_expression | aggregate_expression | identification_variable"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"conditional_expression ::= conditional_term | conditional_expression OR conditional_term"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"conditional_term ::= conditional_factor | conditional_term AND conditional_factor"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"conditional_factor ::= [NOT ] conditional_primary"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"conditional_primary ::= simple_cond_expression |(conditional_expression)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_cond_expression ::= comparison_expression | between_expression | like_expression | in_expression | null_comparison_expression | empty_collection_comparison_expression | collection_member_expression | exists_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"between_expression ::= arithmetic_expression [NOT] BETWEEN arithmetic_expression AND arithmetic_expression | string_expression [NOT] BETWEEN string_expression AND string_expression | datetime_expression [NOT] BETWEEN datetime_expression AND datetime_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"in_expression ::= state_field_path_expression [NOT] IN( in_item {, in_item}* | subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"in_item ::= literal | input_parameter"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"like_expression ::= string_expression [NOT] LIKE pattern_value [ESCAPE escape_character]"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"null_comparison_expression ::= {single_valued_path_expression | input_parameter}IS [NOT] NULL"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"empty_collection_comparison_expression ::= collection_valued_path_expression IS [NOT] EMPTY"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"collection_member_expression ::= entity_expression [NOT] MEMBER [OF] collection_valued_path_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"exists_expression ::= [NOT] EXISTS(subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"all_or_any_expression ::= {ALL |ANY |SOME}(subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"comparison_expression ::= string_expressioncomparison_operator{string_expression|all_or_any_expression}| boolean_expression {=|<>} {boolean_expression | all_or_any_expression} | enum_expression {=|<>} {enum_expression | all_or_any_expression} | datetime_expression comparison_operator {datetime_expression | all_or_any_expression} | entity_expression {= |<> } {entity_expression | all_or_any_expression} | arithmetic_expression comparison_operator {arithmetic_expression | all_or_any_expression}"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"comparison_operator ::== |> |>= |< |<= |<>"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"arithmetic_expression ::= simple_arithmetic_expression |(subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_arithmetic_expression ::= arithmetic_term | simple_arithmetic_expression {+ |- } arithmetic_term"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"arithmetic_term ::= arithmetic_factor | arithmetic_term {* |/ } arithmetic_factor"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"arithmetic_factor ::= [{+ |-}] arithmetic_primary"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"arithmetic_primary ::= state_field_path_expression | numeric_literal | (simple_arithmetic_expression) | input_parameter | functions_returning_numerics | aggregate_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"string_expression ::= string_primary |(subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"string_primary ::= state_field_path_expression | string_literal | input_parameter | functions_returning_strings | aggregate_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"datetime_expression ::= datetime_primary |(subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"datetime_primary ::= state_field_path_expression | input_parameter | functions_returning_datetime | aggregate_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"boolean_expression ::= boolean_primary |(subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"boolean_primary ::= state_field_path_expression | boolean_literal | input_parameter |"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"enum_expression ::= enum_primary |(subquery)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"enum_primary ::= state_field_path_expression | enum_literal | input_parameter |"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"entity_expression ::= single_valued_association_path_expression | simple_entity_expression"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"simple_entity_expression ::= identification_variable | input_parameter"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"functions_returning_numerics ::= LENGTH(string_primary)| LOCATE(string_primary,string_primary [, simple_arithmetic_expression]) | ABS(simple_arithmetic_expression) | SQRT(simple_arithmetic_expression) | MOD(simple_arithmetic_expression, simple_arithmetic_expression) | SIZE(collection_valued_path_expression)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"functions_returning_datetime ::= CURRENT_DATE| CURRENT_TIME | CURRENT_TIMESTAMP"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"functions_returning_strings ::= CONCAT(string_primary, string_primary) | SUBSTRING(string_primary, simple_arithmetic_expression,simple_arithmetic_expression)| TRIM([[trim_specification] [trim_character] FROM] string_primary) | LOWER(string_primary) | UPPER(string_primary)"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"trim_specification ::= LEADING | TRAILING | BOTH"})}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},5246:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>l});var s=n(2340);const t={},a=s.createContext(t);function r(e){const i=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:i},e.children)}}}]);