"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4336],{2561:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var a=s(8040),i=s(5246);const t={slug:"mysql-programming",title:"Programming MySQL",authors:"jiaqi",tags:["MySQL","Database","JPA"]},l=void 0,o={permalink:"/blog/mysql-programming",editUrl:"https://github.com/QubitPi/chatbot-ws/tree/master/docs/blog/2020-08-29-mysql-programming/index.md",source:"@site/blog/2020-08-29-mysql-programming/index.md",title:"Programming MySQL",description:"[//]: # (Copyright 2025 Jiaqi Liu. All rights reserved.)",date:"2020-08-29T00:00:00.000Z",formattedDate:"August 29, 2020",tags:[{label:"MySQL",permalink:"/blog/tags/my-sql"},{label:"Database",permalink:"/blog/tags/database"},{label:"JPA",permalink:"/blog/tags/jpa"}],readingTime:6,hasTruncateMarker:!0,authors:[{name:"Jack",title:"Maintainer of ChatbotWS",url:"https://github.com/QubitPi",imageURL:"https://avatars.githubusercontent.com/u/16126939?v=4",key:"jiaqi"}],frontMatter:{slug:"mysql-programming",title:"Programming MySQL",authors:"jiaqi",tags:["MySQL","Database","JPA"]},unlisted:!1,prevItem:{title:"How to Deal with Polymorphism in MySQL?",permalink:"/blog/mysql-polymorphism"},nextItem:{title:"Programming Oracle Database",permalink:"/blog/oracle-programming"}},r={authorsImageUrls:[void 0]},c=[{value:"Shell",id:"shell",level:2},{value:"Adjust Display Settings of MySQL Command Line",id:"adjust-display-settings-of-mysql-command-line",level:3},{value:"Connecting to MySQL From the Command Line",id:"connecting-to-mysql-from-the-command-line",level:3},{value:"How to Pass Password to mysql Command Line in a More &quot;Secure&quot; Way",id:"how-to-pass-password-to-mysql-command-line-in-a-more-secure-way",level:4},{value:"Find databases containing a particular table in MySQL",id:"find-databases-containing-a-particular-table-in-mysql",level:3},{value:"Search for a Column from Database",id:"search-for-a-column-from-database",level:3},{value:"Save MySQL Query Output to File",id:"save-mysql-query-output-to-file",level:3},{value:"Conditional Insert",id:"conditional-insert",level:3},{value:"Implement Paging",id:"implement-paging",level:3},{value:"Listing Tables by Size",id:"listing-tables-by-size",level:3},{value:"Scripting",id:"scripting",level:2},{value:"Calling SQL Script File from Other SQL Script File",id:"calling-sql-script-file-from-other-sql-script-file",level:3},{value:"User-Defined Variables",id:"user-defined-variables",level:3},{value:"MySQL Functions",id:"mysql-functions",level:2},{value:"IF",id:"if",level:3},{value:"Migration",id:"migration",level:2},{value:"Copying Tables or Databases from One MySQL Server to Another",id:"copying-tables-or-databases-from-one-mysql-server-to-another",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"shell",children:"Shell"}),"\n",(0,a.jsx)(n.h3,{id:"adjust-display-settings-of-mysql-command-line",children:"Adjust Display Settings of MySQL Command Line"}),"\n",(0,a.jsx)(n.p,{children:"You may notice that command line result of mysql is not displaying results properly. Some columns of table are in the\nfirst line and some are in the second line. Output is also broken into two rows. How do we adjust these settings so that\nit properly display results?"}),"\n",(0,a.jsxs)(n.p,{children:["We can use the ",(0,a.jsx)(n.code,{children:"\\G"})," command (instead of the ",(0,a.jsx)(n.code,{children:";"}),") at the end of our SQL queries:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM USER \\G\n"})}),"\n",(0,a.jsx)(n.p,{children:"It will display your table in row form instead of column form."}),"\n",(0,a.jsx)(n.h3,{id:"connecting-to-mysql-from-the-command-line",children:"Connecting to MySQL From the Command Line"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mysql -u USERNAME -pPASSWORD -h HOSTNAMEORIP DATABASENAME --default-character-set=utf8\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"--default-character-set=utf8"})," option allows the UTF-8 character to be displayed properly in console"]}),"\n",(0,a.jsx)(n.h4,{id:"how-to-pass-password-to-mysql-command-line-in-a-more-secure-way",children:'How to Pass Password to mysql Command Line in a More "Secure" Way'}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"#connecting-to-mysql-from-the-command-line",children:"Putting passwords on the command line"})," is in-secure, because anyone with\naccess to ",(0,a.jsx)(n.code,{children:"/proc"})," can trivially read them as long as the program is running."]}),"\n",(0,a.jsxs)(n.p,{children:["The safest way would be to create a new ",(0,a.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/option-file-options.html",children:"config file"}),"\nand pass it to ",(0,a.jsx)(n.code,{children:"mysql"})," using either the ",(0,a.jsx)(n.code,{children:"--defaults-file="})," or ",(0,a.jsx)(n.code,{children:"--defaults-extra-file="})," command line option. The\ndifference between the two is that the latter is read in addition to the default config files whereas with the former\nonly the one file passed as the argument is used. The additional configuration file should contain something similar to:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"[client]\nuser=foo\npassword=P@55w0rd\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsx)(n.p,{children:"Make sure that you secure this file."})}),"\n",(0,a.jsx)(n.p,{children:"Then run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mysql --defaults-extra-file=<path to the new config file> --default-character-set=utf8 -h HOSTNAMEORIP DATABASENAME\n"})}),"\n",(0,a.jsx)(n.h3,{id:"find-databases-containing-a-particular-table-in-mysql",children:"Find databases containing a particular table in MySQL"}),"\n",(0,a.jsxs)(n.p,{children:["Let's say you would like to locate a table whose name is ",(0,a.jsx)(n.code,{children:"foo"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT\n    table_schema AS database_name\nFROM\n    information_schema.tables\nWHERE\n    table_type = 'BASE TABLE'\n    AND table_name = 'foo'\nORDER BY\n    table_schema;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"search-for-a-column-from-database",children:"Search for a Column from Database"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT\n    table_name,\n    column_name\nFROM\n    information_schema.columns\nWHERE\n    column_name like '%SearchedColumn%'\n"})}),"\n",(0,a.jsx)(n.h3,{id:"save-mysql-query-output-to-file",children:"Save MySQL Query Output to File"}),"\n",(0,a.jsx)(n.p,{children:"Try executing the query from the your local client and redirect the output to a local file destination:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'mysql -user -pass -e "select cols from table where cols not null" > /tmp/output\n'})}),"\n",(0,a.jsx)(n.h3,{id:"conditional-insert",children:(0,a.jsx)(n.a,{href:"https://stackoverflow.com/a/913929",children:"Conditional Insert"})}),"\n",(0,a.jsxs)(n.p,{children:["Suppose we have ",(0,a.jsx)(n.code,{children:"x_table"})," with ",(0,a.jsx)(n.code,{children:"columns (instance, user, item)"})," where instance ID is unique. I want to insert a new row\nonly if the user already does not have a given item."]}),"\n",(0,a.jsxs)(n.p,{children:["For example trying to insert ",(0,a.jsx)(n.code,{children:"instance=919191 user=123 item=456"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"Insert into x_table (instance, user, item) values (919191, 123, 456)\n    ONLY IF there are no rows where user=123 and item=456\n"})}),"\n",(0,a.jsx)(n.p,{children:"If your DBMS does not impose limitations on which table you select from when you execute an insert, try:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"INSERT INTO x_table(instance, user, item)\n    SELECT 919191, 123, 456\n        FROM dual\n        WHERE NOT EXISTS (SELECT * FROM x_table\n                             WHERE user = 123\n                               AND item = 456)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In this, ",(0,a.jsx)(n.code,{children:"dual"})," is a table with one row only (found originally in Oracle, now in mysql too). The logic is that the\n",(0,a.jsx)(n.code,{children:"SELECT"})," statement generates a single row of data with the required values, but only when the values are not already\nfound."]}),"\n",(0,a.jsx)(n.p,{children:"Alternatively, look at the MERGE statement."}),"\n",(0,a.jsx)(n.h3,{id:"implement-paging",children:"Implement Paging"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/select.html#id1026131",children:"From the MySQL documentation"}),":"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"LIMIT"})," clause can be used to constrain the number of rows returned by the ",(0,a.jsx)(n.code,{children:"SELECT"})," statement. ",(0,a.jsx)(n.code,{children:"LIMIT"})," takes one or\ntwo numeric arguments, which must both be non-negative integer constants, with these exceptions:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Within prepared statements, LIMIT parameters can be specified using ? placeholder markers."}),"\n",(0,a.jsx)(n.li,{children:"Within stored programs, LIMIT parameters can be specified using integer-valued routine parameters or local variables."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"With two arguments, the first argument specifies the offset of the first row to return, and the second specifies the\nmaximum number of rows to return. The offset of the initial row is 0 (not 1):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM tbl LIMIT 5,10;  # Retrieve rows 6-15\n"})}),"\n",(0,a.jsx)(n.p,{children:"With one argument, the value specifies the number of rows to return from the beginning of the result set:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM tbl LIMIT 5;     # Retrieve first 5 rows\n"})}),"\n",(0,a.jsx)(n.h3,{id:"listing-tables-by-size",children:"Listing Tables by Size"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT\n    table_name AS `Table`,\n    round(((data_length + index_length) / 1024 / 1024), 2) AS `Size in MB`\nFROM information_schema.TABLES\nWHERE table_schema = "$DB_NAME"\nORDER BY `Size in MB`;\n'})}),"\n",(0,a.jsxs)(n.p,{children:["where ",(0,a.jsx)(n.code,{children:"$DB_NAME"})," is the name of the database whose tables are to be listed"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsxs)(n.a,{href:"https://stackoverflow.com/a/9620273",children:["To check the size of a single table (",(0,a.jsx)(n.code,{children:"$TABLE_NAME"}),") of a database (",(0,a.jsx)(n.code,{children:"$DB_NAME"}),")"]}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT\n    table_name AS `Table`,\n    round(((data_length + index_length) / 1024 / 1024), 2) AS `Size in MB`\nFROM information_schema.TABLES\nWHERE table_schema = "$DB_NAME" AND table_name = "$TABLE_NAME";\nORDER BY `Size in MB`\n'})}),"\n",(0,a.jsx)(n.h2,{id:"scripting",children:"Scripting"}),"\n",(0,a.jsx)(n.h3,{id:"calling-sql-script-file-from-other-sql-script-file",children:"Calling SQL Script File from Other SQL Script File"}),"\n",(0,a.jsxs)(n.p,{children:["You can use ",(0,a.jsx)(n.code,{children:"source"})," command. So your script will be something like:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"use your_db;\nsource script/s1.sql;\nsource script/s2.sql;\n-- so on, so forth\n"})}),"\n",(0,a.jsx)(n.h3,{id:"user-defined-variables",children:"User-Defined Variables"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/user-variables.html",children:"User Defined Varibles"})," can be used across scrips like\nthis:"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"main.sql"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"-- User-Defined Variables\nSET @tom_id = 1;\nSET @jack_id = 2;\n\nsource add_data_to_person_table.sql;\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"person.sql"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'INSERT INTO\n    Person (id, name)\nVALUES\n    (@tom_id, "TOME"),\n    (@jack_id, "JACK");\n'})}),"\n",(0,a.jsx)(n.h2,{id:"mysql-functions",children:"MySQL Functions"}),"\n",(0,a.jsx)(n.p,{children:"MySQL has many built-in functions."}),"\n",(0,a.jsx)(n.h3,{id:"if",children:"IF"}),"\n",(0,a.jsxs)(n.p,{children:["Returns a value if a condition is ",(0,a.jsx)(n.code,{children:"TRUE"}),", or another value if a condition is ",(0,a.jsx)(n.code,{children:"FALSE"}),'. For example, Return "YES" if the\ncondition is TRUE, or "NO" if the condition is FALSE:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT IF(500 < 1000, "YES", "NO");\n'})}),"\n",(0,a.jsx)(n.p,{children:"This function is useful if we would like to replicate a table and update some column values on the flight:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'INSERT INTO some_table(column1, column2, column3)\nSELECT column1, column2, IF(column3 = "Blue", "Dark Blue", "Dark Color")\nFROM some_table;\n'})}),"\n",(0,a.jsx)(n.p,{children:'In the example above, all rows with column value "Blue" will have "Dark Blue" as the new value for that column; all\nother rows will be changed to "Dark Color".'}),"\n",(0,a.jsxs)(n.p,{children:["We could have richer modifications, other than 2-branch modification, using\n",(0,a.jsx)(n.a,{href:"https://www.w3schools.com/mysql/func_mysql_case.asp",children:"CASE"})]}),"\n",(0,a.jsx)(n.h2,{id:"migration",children:"Migration"}),"\n",(0,a.jsx)(n.h3,{id:"copying-tables-or-databases-from-one-mysql-server-to-another",children:"Copying Tables or Databases from One MySQL Server to Another"}),"\n",(0,a.jsxs)(n.p,{children:["We could use ",(0,a.jsx)(n.code,{children:"mysqldump"})," to export the data from one MySQL instance and ",(0,a.jsx)(n.code,{children:"mysql"})," command line utility to load it into\nanother."]}),"\n",(0,a.jsxs)(n.p,{children:["Suppose we have a ",(0,a.jsx)(n.code,{children:"person"}),' table in "prod" database hosted in "192.168.1.100" and we would like to migrate this table\ndata into a dev instance ("192.168.1.101") for testing purposes.']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mysqldump --column-statistics=0 -u prod-user-name -pprodPassword -h 192.168.1.100 prod-database person --default-character-set=utf8 > dump.sql\nmysql -u dev-user-name -pdevPwssword -h 192.168.1.101 --port=32228 dev-database < dump.sql\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"--column-statistics=0"})," is set so that it prevents runtime error of"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mysqldump: Couldn't execute. Unknown table 'column_statistics' in information_schema\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},5246:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var a=s(2340);const i={},t=a.createContext(i);function l(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);